// Code generated by go-bindata.
// sources:
// manifests/cert-manager.tar.gz
// manifests/default-network-policies.tar.gz
// manifests/nginx-ingress.tar.gz
// DO NOT EDIT!

package components

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _manifestsCertManagerTarGz = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x00\xdd\x06\x22\xf9\x1f\x8b\x08\x00\x19\x2f\xf5\x5b\x00\x03\xed\x5b\x5b\x73\xe3\x34\x18\xed\x73\x7e\x85\x26\xcb\x03\x30\xd8\xf1\x25\x4e\x18\x0f\x30\x94\xdd\x02\x3b\x6c\x4b\xa7\x5b\xf6\x85\x61\x18\xc5\x56\x62\x6d\x6d\xcb\x2b\xc9\x81\xd0\xd9\xff\x8e\x24\x5f\x62\x3b\x4e\x93\xde\x52\x96\xea\xbc\x24\x76\x74\xfd\xa4\xf3\xdd\xa4\x98\xa3\x04\xa6\x78\x8e\x18\x67\xa3\x00\x51\x6e\x88\x47\xb8\x40\x74\x74\xf4\x70\xb0\x04\xa6\x53\x4f\x7e\xda\x53\xcf\x6a\x7e\x56\x38\xb2\x5d\x77\xea\x39\x8e\x27\xbf\x5b\xf6\xc4\x71\x27\x47\xc0\x7b\xc0\x31\x6c\x45\xce\x38\xa4\x00\x1c\x41\x16\xe1\xf7\x08\x71\x67\xdc\x5f\x6e\xd7\xef\x9f\x28\xcc\x6d\xeb\xbf\x84\x71\x8e\x98\xb9\x82\x49\x7c\xdf\x3e\xe4\x02\x4f\x26\xe3\xad\xeb\x6f\x3b\x5e\xbd\xfe\x9e\xe7\x1e\x59\x8e\x35\x76\xc7\x47\xc0\x7a\x88\x09\xee\xc2\x33\x5f\xff\x17\xe0\x0c\x26\x88\x65\x30\x40\x00\xa7\xe0\xaf\x08\x07\x11\xe0\x11\x66\xa0\xb9\x1b\xc0\x0c\x81\x10\x65\x31\x59\xa1\x70\x90\x56\x15\xfc\x56\x99\x01\x4a\x20\x8e\x7d\x30\x1c\x0e\x9e\x7a\x52\x1a\x7b\x63\x2b\xff\x39\x4a\xb2\x18\x72\xc4\xee\x6f\x09\x6e\xa1\xff\xa7\xee\xd4\x96\xfc\x77\x3c\x5b\xeb\xff\x43\x60\x8f\xf5\x67\x88\x2e\x71\x80\x60\x10\x90\x3c\xe5\x77\xb0\x08\xbb\xf4\xff\xd8\x5b\xeb\xff\xa9\xd2\xff\x63\x7b\x62\x69\xfd\x7f\x08\xc0\x0c\xbf\x43\x94\x61\x92\xfa\x60\x69\x0f\xae\x70\x1a\xfa\xe0\x6d\xb1\xe2\xc7\xc5\x8a\x0f\x12\xc4\x61\x08\x39\xf4\x07\x00\x48\xe5\xdf\xd1\xfb\x00\x5c\x5f\x1b\x00\xcf\x81\xf9\xae\xf0\x19\x6a\x03\x01\x3e\x7e\x2c\xab\x94\xf6\xe2\xfa\x7a\x5b\x21\xd9\x04\x8a\x19\xea\xd6\xe8\xe9\x09\xa5\xa1\x2a\x15\xc3\x99\xa8\x21\x07\x05\x00\xcc\xb2\x8d\xb2\x00\x04\x11\xa4\xbc\xfd\xde\x58\x5a\xe6\xc4\xb4\x8c\x10\x2d\x4d\x4b\x15\xa2\x28\x46\x90\x6d\x76\x05\x40\x84\x28\xe6\xe2\xc9\x07\x97\x38\x8e\xc5\xcb\xa7\x5e\xac\x47\xc0\x1e\xfc\x2f\x0c\x7f\x82\xee\xc4\x7d\x89\x1d\xfc\x77\x6c\xcb\xa9\xf9\x3f\x76\x25\xff\x5d\xd7\xf2\x34\xff\x0f\x81\x26\xff\x05\x89\xd8\x68\x69\xcf\x04\xdd\x2b\x4d\xf0\xaa\x5e\x7b\xad\x05\x2a\x2d\xc0\x32\x14\xc8\xfe\xa8\x90\x0d\x0e\x20\xf3\x81\x2d\x9e\x98\x68\x20\xe0\x84\x16\x23\x49\x20\x0f\xa2\x37\x8d\xa1\x6d\x1b\xdc\xf6\x9e\x2b\x02\x96\x0d\x36\xa4\x2f\x11\xb7\xda\xde\xde\xfa\x4d\x33\x13\xb5\xd2\x94\x70\xc8\xc5\xea\x97\x4d\x55\x73\x53\xdf\x5b\x56\xe0\xac\x6f\xc9\x95\x78\x49\xca\x21\x4e\xc5\x26\x5a\x8f\xc6\xe8\xdf\x21\x15\x70\xa2\xe4\x39\xfc\x90\xc3\x95\x89\xc9\xe8\x3d\xe2\x82\x85\xc1\x55\x4b\x03\x19\xb2\x61\x4a\xa4\xc8\x7d\xb1\x5c\x9e\x69\x0d\xbb\x4d\x9c\xe7\x71\x7c\x4e\xc4\x22\xac\x7c\xf0\x7a\x7e\x46\xf8\x39\x45\x4c\xee\xd5\x75\x39\x48\x17\x8d\x71\xc9\x91\x19\x46\x10\x0b\xd2\x8b\x0e\x44\x61\x92\xd3\x00\x19\xf5\x4e\xfb\xf6\xb3\xcf\xcf\x7f\x7d\xf5\xe7\xd9\xf1\xe9\xc9\xdb\xf3\xe3\x97\x27\x5f\x74\x6a\x0a\x49\x86\xa2\xa2\x5a\x6a\x21\xb4\xfd\x2a\xa2\x74\xd9\x1e\x41\x21\x9b\x56\xf9\xc6\xef\x00\xa8\xd0\xfb\x47\x4a\x12\xbf\xf5\x1a\x80\x39\x46\x71\x78\x81\xe6\xdd\xf7\xe5\x2f\xe7\x90\x47\x7e\xbd\x53\xd6\xdc\x6a\x94\xae\xa6\xcc\xda\x4d\x50\xf4\x21\x97\x26\xa0\xdb\x70\x90\xe5\x62\x77\x5b\x49\xe7\x75\x82\x12\x42\x85\xcc\x5d\xe7\x14\xff\x1f\x8d\xe2\x33\xc2\x1e\xf6\xbf\xa4\x0b\x66\x2c\x97\xac\xa4\xe1\x6d\xdd\x80\x5d\xfe\xff\x64\x3c\xae\xe3\xbf\xb1\x25\xe3\xbf\xf1\xc4\xd6\xf6\xff\x20\x68\xdb\x7f\x8c\xfe\xe6\x28\x95\x4f\xcc\xbc\xfa\x9a\x49\xdd\xdc\xf6\x07\x5e\x0a\x71\x91\xe4\xa2\xd4\x22\xaf\xd0\x1c\xa7\x58\x6a\xc2\x3e\xef\xa0\xb9\x6d\x98\x29\x37\x57\xb9\xb7\xca\xa6\x07\x3d\xf6\x67\x18\xa1\x38\x31\x59\x34\x8a\x08\xb9\x1a\x8a\x46\x68\x68\xe0\x54\x2c\x51\x1c\x3f\xa9\xad\x5f\x50\x92\x97\xfd\x6d\x4c\x62\xb9\x8e\x9f\x60\x9c\x45\xd0\xae\x7c\x97\x62\xa0\xa5\xe0\x0a\x69\xbc\x56\xd2\x50\xef\xb3\x38\xa7\x30\xee\xca\x49\x7a\x12\x01\xc9\x50\x5d\x03\x80\x47\xd5\xb0\x7b\xf0\xff\xee\xc4\x2f\xb1\x93\xff\x4e\x9d\xff\x19\x7b\xae\xe4\xbf\xeb\x58\x13\xcd\xff\x43\xe0\xf1\xf8\xaf\x89\xaf\x24\xd6\xc3\xf8\x0d\xaa\xd7\x29\xf8\xf0\xe0\xde\xd4\x1e\xfc\x8f\x85\x77\x8e\xd2\x80\xae\x32\x6e\xb4\x7d\x01\xb1\x3c\x0b\x9c\x2e\x76\xa9\x85\x1d\xfc\xb7\x2d\x77\x9d\xff\x9b\x58\x22\xfe\x77\x2d\xcb\xd3\xf9\xbf\x83\xa0\xc9\xff\xcd\x4d\x3e\xaa\x77\x76\x9f\x15\xdb\xe4\x7c\x73\xab\x94\x9b\xa3\x66\x12\x0c\x92\x32\x96\x7d\x01\x2e\x23\x04\x8e\x5f\x9e\x9e\xa8\x18\x53\xd8\xb8\xdf\x2e\xde\x14\xe1\xa7\x7a\xf4\x41\xc4\x79\xc6\xfc\xd1\x48\xd6\xa9\x1a\x12\x74\x76\x4c\x31\x5c\xb3\xd1\x89\x49\xe8\x62\x14\x62\xaa\x22\xef\x55\xd9\xf8\x89\x3c\x87\x02\x30\x0c\x45\xb0\xc3\x40\xce\x50\x08\xe6\x84\x16\xfd\x51\xb4\xc0\x8c\x53\xa5\x79\x54\xf1\x4e\xd2\x42\x9d\x61\x15\xb9\x08\x11\xb8\x15\x07\x5a\x8d\x74\x45\xeb\xe7\x56\xb2\xa2\x2e\xfd\x8d\xfa\xfc\x6e\x5d\xa2\xcc\x53\xc8\x91\x49\x9e\x03\x32\x07\x50\x4c\x34\xa0\x88\x17\x83\xe3\x04\x08\xa5\x4a\x11\xe0\x95\x54\xca\x54\x3b\xc8\x28\x5e\x0a\x0a\x82\x2b\x54\xcc\xad\x7c\xfe\x05\xad\xde\xaa\xfa\x8d\x50\x70\xbb\xfc\x4b\xa1\xa4\x70\x16\x17\x5d\xfc\x7c\x79\x79\x6e\x58\xb6\x54\x99\x42\xd5\xa5\x0b\x24\xda\x25\x4b\x1c\x56\xaa\x50\xc8\xde\xb2\xc5\xb4\x3f\xea\xd0\xee\xff\x8f\x3d\xf4\x7f\x9d\x47\xb8\xeb\x65\x80\x5d\xfe\x9f\x67\xaf\xef\x7f\xb8\x22\xf0\x13\xfe\x9f\x35\xb1\xb5\xfe\x3f\x04\x7a\xcf\x7f\x6a\x7f\xa4\xa5\xe2\x9f\x26\xbf\xbb\xbb\xd7\x5b\x75\xb8\xad\x2f\xb0\x91\x4c\xee\xb1\x86\x21\x66\x52\x8b\x1a\x4b\x18\xe3\x50\xd9\x10\x1f\x0c\x39\xcd\xd1\xa7\x7b\xe5\xe1\x5e\xfe\x9f\xb0\x1b\xfb\xc4\x84\xbb\xfd\x3f\x77\x7d\xff\xc7\x95\xfc\x9f\xba\x13\x47\xf3\xff\x10\x78\x3c\xff\x4f\x6e\x8e\x5c\xa5\xc9\xef\xef\x02\x6a\xd7\xef\x56\xae\x5f\x43\xf4\xda\xfb\xd3\xb8\x09\x7b\xe8\x7f\x3a\x83\xc1\xbd\xee\x81\xee\xd2\xff\xd3\xc9\x64\x7d\xff\x67\x2c\xde\x3b\x8e\xe5\xe9\xfb\x9f\x07\x41\x53\xff\xab\x85\x86\x39\x8f\x08\xc5\xff\x28\x3d\xb9\x25\x09\x58\x58\x81\x0b\x12\xa3\xdd\xb7\x02\x0e\x9f\xba\xa3\x79\x5c\xa4\xe0\x0c\x99\xd1\xfc\x49\x26\xf0\x98\x0f\x7e\x1f\x6e\x9a\xb7\xe1\x1f\x65\xdb\xd5\xa1\x68\x59\x0a\xcf\x71\x20\xb7\xfe\xf0\x2b\x30\x2c\x93\x75\xf2\x6b\x3b\x53\x5f\x56\x16\xc6\x6a\xa6\x2a\x7e\xa9\x5e\x74\xfa\xec\xed\x81\xa4\x73\xbc\x48\x60\xa6\x1a\x2d\xcc\x81\xfa\x8a\x96\x28\xe5\xe5\x4b\x75\xf4\xae\xbe\x67\x24\xdc\xaf\xaf\x75\xee\xb6\xaf\x57\x9c\x2e\xa4\x51\x44\xbd\x6d\x19\x86\x31\xb8\xe7\x4e\xf8\x41\xbc\x90\xe9\x86\xff\xe2\x86\x10\xc3\x2b\xed\x65\x25\xb0\x1b\xa6\x38\xe8\x1c\xd9\xa8\x6d\xde\x3b\x17\x96\xcf\xde\x0b\xf7\xa3\xdc\x6b\x5b\x6e\x3c\xdc\x1c\xbf\xec\x19\x37\x6d\x78\x1c\xdb\x63\xa7\xae\xeb\xd1\x7b\xa3\x6f\xcd\xff\x7d\xce\x7f\xd7\x8c\xb8\xdb\x21\xd0\xae\xf8\x7f\x6a\x3b\x9d\xf3\x1f\x7d\xff\xf3\x50\x78\xc4\xf3\xdf\x86\x22\x7d\x66\x87\x40\x9b\xc7\x3a\x7d\x27\xc2\x6b\xf9\xb4\xcf\x83\x1b\x72\x2b\x22\x22\xa1\xa2\xd4\xf5\xab\xfa\x7a\x8e\xa1\x0a\xb5\x1e\xd8\x1d\xdd\xf5\xad\xfc\x7f\x29\x65\xf9\x20\x7f\xff\xd9\xc9\x7f\x77\x6c\x77\xf8\x2f\x7e\xd7\xf9\xbf\x83\xa0\x93\xff\x0b\x11\x0b\x28\xce\x8a\xd4\x96\xdc\xa1\xc6\x69\xf9\x0f\x20\x19\x47\xbf\x21\x57\x24\x21\x1c\x2f\x51\x75\x6b\x61\x20\x22\x48\x9c\x8a\xbd\xbe\x20\x3c\x8b\x07\x22\xfe\x5d\x5f\x06\xac\x4c\xe2\x71\x29\x39\x70\x2c\xf9\xb9\x82\x83\x3a\x60\xae\x64\xfa\xbd\x60\xc4\x92\xc4\x57\x92\x51\x7d\x76\xb6\xba\xb2\x66\xd4\x59\x81\x05\xe6\x51\x3e\x33\x03\x92\x8c\xca\xba\xa3\x58\x0c\x2e\xe0\xf1\xa0\x26\xa4\x65\x5a\xa6\xad\xa3\x58\x0d\x0d\x0d\x0d\x0d\x0d\x0d\x0d\x0d\x0d\x0d\x0d\x0d\x0d\x0d\x0d\x0d\x0d\x0d\x0d\x8d\xe7\x88\x7f\x01\x99\x1f\xb7\x59\x00\x50\x00\x00\x01\x00\x00\xff\xff\x29\xa3\xfd\x86\xdd\x06\x00\x00")

func manifestsCertManagerTarGzBytes() ([]byte, error) {
	return bindataRead(
		_manifestsCertManagerTarGz,
		"manifests/cert-manager.tar.gz",
	)
}

func manifestsCertManagerTarGz() (*asset, error) {
	bytes, err := manifestsCertManagerTarGzBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/cert-manager.tar.gz", size: 1757, mode: os.FileMode(436), modTime: time.Unix(1542795033, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _manifestsDefaultNetworkPoliciesTarGz = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x00\x47\x02\xb8\xfd\x1f\x8b\x08\x00\x19\x2f\xf5\x5b\x00\x03\xed\x95\x5d\x6f\x9b\x30\x14\x86\x73\xcd\xaf\xf0\x1f\xc0\x7c\xc3\xc6\xd5\xb4\x8f\xab\x4d\xd3\xa4\x4e\xbd\x77\xcd\x49\x70\x31\x18\x61\x93\x2e\xaa\xf2\xdf\x67\x93\xd0\x76\x55\xb3\x64\x8b\x94\x6d\xda\x79\x10\x32\x36\x87\x63\xc3\x7b\x5e\x43\x83\x96\x75\x62\x09\xda\xe8\xa0\x82\x25\x1b\xa5\xf1\x3b\x30\x77\x6a\x68\xfc\x5e\x49\xc1\x05\xe8\x60\x71\x1e\xa1\xa5\x28\x32\xd7\x46\x45\x16\x3e\x6d\x67\x16\x51\x92\x14\x49\x9c\x65\x49\x6a\xe3\xe2\x30\x8f\xf3\x05\xc9\xce\x9c\xf7\x24\x46\x6d\xd8\x40\xc8\x82\xe9\x5a\xdc\x02\x98\x38\x7d\x39\xee\xd8\xfd\x7f\x14\x7a\x8a\xfe\x06\xda\x5e\x32\xf3\xbb\x95\x70\xaa\xfe\x59\x1c\xe7\x59\x5e\x58\xfd\xe3\x3c\x89\x51\xff\x4b\xf0\x8b\xfa\x57\xd0\x6d\xfc\x16\x0c\xab\x98\x61\x3e\xe3\x1c\xb4\xa6\x1b\xd6\xca\x9f\xcd\xe1\x04\xce\xf3\xf4\xa0\xfe\xd6\xf5\xcf\xf4\x2f\x52\x5b\x2e\x24\xbc\xc4\x07\xf8\xcf\xf5\x67\xbd\xb8\x86\x41\x0b\xd5\x95\x64\xaf\xbb\xe8\x56\xb4\x79\xa5\xa9\x50\xc1\x3a\xf2\x6c\xb7\x2a\xc9\xe7\xdd\xad\x2f\xae\x22\x36\xde\x5c\x00\xa5\x47\x48\xc7\x5a\x28\xc9\x54\x17\xb0\x1a\x6c\x39\xf8\x46\xf9\xec\x4e\x3f\x54\x89\x8d\xb9\xbf\xf7\x89\x58\x12\x7a\xcd\xe4\x08\x9a\xba\x47\x74\xcf\x38\x90\xed\x76\x9f\x61\xea\x96\x36\xf0\x50\x90\x4b\x01\x52\xc3\xf3\x27\xf6\x35\x3b\x47\x74\x95\x0b\xd7\x3d\x70\xb7\xb6\x5e\x55\x57\x20\x81\x1b\x35\xd8\xdc\xdb\x69\xc4\xbd\xc0\xd7\x4d\x0f\xda\x05\xf8\xe4\xc3\xb4\x66\x7b\xb9\x5b\xfc\x6e\xd0\x28\xd7\xba\x2b\xd1\xbf\x95\x8a\x37\xbb\xae\x83\x8b\xca\xe6\x0a\xe9\x74\x04\xe1\xc3\x38\x7c\xe3\xd0\x9b\xc7\x38\x9f\x44\xf9\x6b\x1a\x67\x29\x75\x6d\x18\xc4\xa9\xf7\xa7\xa5\x7e\x91\x93\xfc\xff\xae\x66\x83\x39\x6a\xf3\x83\x1c\xf3\x7f\x62\x3d\xff\xe3\xff\x3f\xce\xf2\x08\xfd\x7f\x09\x9e\xfa\xdf\xba\xbd\x02\xcd\x07\xd1\x9b\xa9\xff\x71\xbc\x81\xc1\x16\x03\xe8\xd9\xff\x64\x2e\x09\xb2\x54\x03\xf9\xa4\x1a\xd5\x2a\x23\xd6\x40\xb8\xb4\xdf\x11\x06\x0f\xba\x95\xe8\xac\x2d\x57\xca\xf4\xd2\x6b\x99\xe8\x8c\x3d\xed\x04\xa5\xe7\xef\xb7\x8a\xab\x71\x60\xb7\xe4\x3d\xe8\xba\x1d\x9b\xda\x39\xcf\x86\xc9\x92\x68\x37\xfe\xc6\x6e\x37\x6b\x25\x1b\xbb\xf9\x78\xf3\xce\xf2\x72\x51\x7a\x5a\x8d\x03\x87\x29\x71\x6d\x4c\xaf\xcb\x20\x58\x09\x53\x8f\x37\x94\xab\x36\xd8\xe7\x09\xa4\x5d\x23\x37\xd2\x5b\xcf\x2f\x19\xd2\x88\x86\x7f\xa7\x17\x11\x04\x41\x10\x04\x41\x10\x04\x41\x10\x04\x41\x10\x04\x41\x10\x04\x41\x10\x04\x41\xce\xe1\x3b\x9a\x28\x8b\x32\x00\x28\x00\x00\x01\x00\x00\xff\xff\x0e\xd2\xae\xaf\x47\x02\x00\x00")

func manifestsDefaultNetworkPoliciesTarGzBytes() ([]byte, error) {
	return bindataRead(
		_manifestsDefaultNetworkPoliciesTarGz,
		"manifests/default-network-policies.tar.gz",
	)
}

func manifestsDefaultNetworkPoliciesTarGz() (*asset, error) {
	bytes, err := manifestsDefaultNetworkPoliciesTarGzBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/default-network-policies.tar.gz", size: 583, mode: os.FileMode(436), modTime: time.Unix(1542795033, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _manifestsNginxIngressTarGz = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x00\xc0\x08\x3f\xf7\x1f\x8b\x08\x00\x19\x2f\xf5\x5b\x00\x03\xed\x5b\x6d\x53\xe3\x38\x12\xe6\x73\x7e\x85\x0a\xae\x8a\xbb\xaa\xb5\xe3\xbc\x38\x99\x73\xed\x6e\x5d\x16\xb8\x59\xaa\x66\x58\x0a\x98\xf9\x3a\x28\xb6\x88\x35\xd8\x96\x57\x92\xc9\x64\xb7\xf6\xbf\x5f\xcb\x6f\xb1\x1d\x9b\xbc\x00\x81\xd9\x73\xf3\x21\x44\x6a\xb5\x5a\x6a\x3d\xad\x96\x5a\xd1\xbb\x3e\x0e\xe8\x1d\x11\x52\x74\x83\x19\x0d\xbe\x69\x34\x98\x71\x22\x44\xf7\xe0\xd9\xc8\x00\x1a\x8f\x4d\xf5\xd9\x1b\x9b\x46\xf1\x33\xa3\x83\xde\x60\x30\x36\xfb\xfd\x91\x39\x1a\x1f\x18\xbd\x91\x69\x8c\x0f\x90\xf9\x7c\x2a\x34\x53\x24\x24\xe6\x08\x1d\x60\xe1\xd2\xaf\x84\xc8\xfe\xb0\x9e\x6f\x5d\xfd\x77\x4a\x7a\xa3\xfd\x25\xf1\x43\x0f\x4b\xf2\xf4\x95\xb0\xb5\xfd\xfb\x86\x69\x98\xad\xfd\xf7\x41\x9b\xd8\xdf\xf6\x60\x92\x08\xd7\x38\xf3\x88\x36\xa5\x81\x03\x2c\xfa\x02\xfb\xde\x86\x7d\x28\x03\x8f\x46\xc3\x46\xfb\x9b\xc3\xaa\xfd\xcd\x61\xdf\x38\x40\xc6\x8b\x8e\x3c\xa5\xff\x73\xfb\xe3\x90\x7e\x26\x5c\x50\x16\x58\x88\x4f\xb1\xad\xe3\x48\xba\x8c\xd3\x3f\xb0\x84\x32\xfd\xfe\x9d\xd0\x29\xeb\x3e\xf4\x3a\xf7\x60\x77\x0b\x9d\x24\x4b\xe1\x0a\x56\xc2\x2f\xc9\x42\xe8\xf8\x44\x62\x07\x4b\x6c\x75\x10\x0a\xb0\x4f\x2c\x94\xae\xa0\x8e\x5a\x2f\x57\xe4\x4e\x55\x40\x37\xef\x39\x8b\xc2\x47\x3a\x01\xae\x95\x3e\x56\x44\x8a\x68\xfa\x95\xd8\x52\x28\x99\x5a\xca\x7f\x4d\xf8\x03\xb5\xc9\xc4\xb6\x59\x14\x48\xa8\x40\xe8\xcf\x3f\x35\x44\xef\x90\xfe\x19\x7b\x11\x11\xba\x92\x21\x42\x6c\x13\xf4\xd7\x5f\x71\x7d\x5e\x60\x01\x6b\x33\x9b\x12\x43\x3c\x41\x56\x5b\x65\xfa\xe4\x5c\x81\x53\x94\x6d\x21\x87\xdc\xe1\xc8\x93\x9d\xd7\xb6\xef\x3a\xda\x04\xff\xca\x8e\xdb\xe0\xbd\x4a\x6b\xf0\xdf\x33\xc7\xbd\x0a\xfe\xfb\x83\xc1\xa8\xc5\xff\x3e\x68\x4b\xfc\xc7\xa0\x6c\x46\xfc\x3a\xe4\x6d\x84\xbb\x12\xea\x6a\x31\x57\x40\x5c\x87\x47\x1e\x49\xdd\x41\xe6\x64\xe2\xaf\x8a\x34\x74\x78\x18\xff\x0b\xed\x58\xc4\x6d\x52\xa8\xb1\x59\x70\x47\x67\x3e\x0e\x45\x5e\x14\x32\x67\xf9\x45\x10\x9b\x13\x99\x7c\x7f\x20\x7c\x5a\x68\x3a\x23\xf2\xc9\xfd\x65\x1c\x17\x6a\x7c\x19\xd7\x11\x3a\x4d\xdc\x86\x40\x92\xa1\xc3\x1f\x89\x07\xbe\x0e\xcc\xa0\x51\xe7\x67\xed\xc7\x74\xfc\x9a\xed\x61\x21\x7e\x3e\xcc\xdb\xfc\x4a\x38\xcc\xce\xe1\xb2\x9e\x05\x12\x20\xeb\xc1\x8e\xed\x11\xec\x10\x0e\x6d\x63\x68\x17\xda\xdc\xb8\x54\x20\x17\xc7\xfd\x4c\x09\x02\x73\x86\x92\x38\xca\x72\x0b\x16\x21\xdb\xc5\xc1\x8c\x20\x42\xa5\x4b\x38\x0a\x31\x07\x25\xc1\x23\xe7\xad\xe7\x2e\x09\x90\x87\xa3\xc0\x76\xa1\x53\x04\x5c\xa8\xe4\x3b\x0a\x2a\xe8\xcb\xa9\x69\xd4\x4f\x0b\xa3\xa9\x47\xed\xc3\xe6\xb9\x4e\xfe\x8f\x42\x58\x75\xe4\xc9\x53\x5f\xe9\x01\xcc\xbc\x93\x54\x58\x80\x21\xa3\xc1\x63\x4b\xa4\xd2\x41\x69\x14\xaf\x0d\xfc\x94\x36\xf1\xff\x0e\x09\x3d\xb6\xf0\x49\x20\x77\xdb\x05\xd6\xf8\xff\x61\x1f\x9c\x7d\xd9\xff\x0f\x4c\xb3\xf5\xff\x7b\xa1\xa2\xff\xc7\x61\x28\x96\xae\xfe\x34\xb7\x7a\x8d\xc3\x6f\x82\xfb\x2b\xec\x00\x22\x24\xb6\x52\x8c\x83\xbe\xd4\xc6\xc2\x42\x7d\xf8\x26\x24\x87\xb5\x3b\x5b\x24\x90\x54\xca\x41\xe3\x4f\x31\xf4\x32\x94\xfa\xf8\xdb\xa7\x00\x3f\x60\xea\xe1\xa9\x07\xd2\x7b\xaa\x59\xec\x72\x19\x4f\x78\x7c\x2c\x6d\xf7\x03\x9e\x82\x2e\x59\xa3\xb5\xc3\x57\x14\x82\x67\x05\xae\x90\x33\x07\x4a\x32\x20\xa5\x32\x0b\x73\xa9\xc8\x2b\x89\xdf\xb0\x83\x6a\x17\xa0\x78\x3a\x0b\xb1\x08\xe6\x90\xeb\xd2\x40\xb2\xd2\xf8\x08\xa7\xdf\x47\x53\xc2\x03\xf0\xe8\xf1\xde\xae\xca\xad\xcc\xcf\x21\xe5\x2c\x25\xa6\x01\xac\x89\x65\x53\x6d\x53\xad\x10\xa2\x3e\x9e\x01\xe7\xef\x11\x5e\x28\xe1\xcb\xae\x6a\x9a\x75\x9b\xe4\x59\x86\xde\xfb\xb7\x6e\x14\xc4\x62\x3e\x2b\xe8\x93\xe8\xd4\xd8\xbc\xc2\xa7\x69\x69\x30\xae\x41\x7c\x73\x0f\xab\x46\x13\xc9\x89\xe1\xa7\x7f\xfc\xf3\xf2\xb7\xd3\x2f\x17\x93\x8f\x67\xd7\x97\x93\x93\xb3\x7f\x75\x2b\x8c\x2b\x82\x4a\x5b\xf0\x4f\xc9\xb6\x55\x60\x3a\x42\x91\x20\xc8\x61\xf3\x60\x8e\xb9\x83\x26\x97\xe7\x85\x4a\x12\x3c\x54\x47\x90\xcc\x6a\xa6\x43\xa9\x12\x76\x14\x05\x8d\xff\x72\xe6\x5b\x95\x0a\x84\xee\x28\xf1\x9c\xf4\x64\x55\x5b\x77\x89\xa5\x6b\xe5\x4b\x2d\x86\xd7\xa3\x5d\xc7\xc3\x7f\xd9\xfe\x63\x08\x17\xf8\x43\xc6\xe5\x8a\x49\x13\xad\x5c\x29\xc3\x8a\xe4\x7c\x55\x5e\x42\x33\x0b\xbd\x33\x2a\xf5\x2e\x13\xb2\xb6\xaa\x28\x53\x3c\x2e\x74\x38\x1c\x34\x4a\xad\xd6\xe5\x62\x09\xf6\xa4\xfb\xb8\xdc\x9e\xba\xcf\x68\x94\x5c\xad\xf5\xe8\x03\x09\x60\x8d\x5d\x72\x36\x25\xe5\xf9\xb9\x03\x57\x15\x71\x72\xe3\xc2\x1a\x74\x99\x07\x3e\xba\xac\x94\x1a\xe3\x7b\x22\xab\x56\x09\x63\x63\x74\x13\x55\xff\xa8\x56\x36\xaa\x28\x6c\x97\xa8\x21\xfe\x7a\x73\x73\x59\xaa\xa2\x01\x95\x14\x7b\xa7\xc4\xc3\x8b\x6b\x02\x83\x75\x84\x92\x50\xe2\x09\x09\xa7\xcc\x69\xaa\x15\x91\x0d\xa1\x94\x28\x0c\xa4\x57\xaa\x97\xd4\x27\x2c\x92\xcb\xe6\x85\x5a\x08\xa6\x1c\xfa\xb6\x27\xe8\xe5\x06\x0f\x87\x92\x88\x53\xb9\x38\x81\x15\x46\xbe\x55\x06\x62\xe3\x10\x4f\xa9\x07\xc6\x21\xa2\x3a\x44\xec\x38\xd5\x22\x0d\x5d\x9c\xdd\x7c\xf9\xe5\xfc\xe2\xf4\xcb\xf5\xd9\xd5\xe7\xf3\x15\x07\xe0\x70\x16\xae\x36\x9a\x7c\xf8\x50\x2a\xe3\x51\x30\x11\x9f\xc0\xa3\xc2\x64\x0f\xd4\xd9\x60\x3e\xd7\x14\xe8\x53\x26\x18\x24\xc4\x57\xb0\xd6\xc1\x53\x2e\x2c\x34\xf1\xe6\x78\x91\xe1\x10\x8e\x14\x3e\x0d\xe2\x83\xe6\x7b\x0e\xde\xe1\xb2\x3c\x6f\x23\xe3\xad\x04\xc9\x7f\x63\xda\x2c\xfe\xaf\xdd\x3e\x37\x3e\x0c\xac\xbd\xff\xed\x0f\x2a\xf1\xff\xc8\x18\xb6\xf7\xbf\x7b\xa1\x62\xfc\x9f\x87\xfe\xe9\x8d\x6a\x4d\xdc\xbf\x1a\x20\xbd\x56\xb8\x2f\x17\x21\xc9\xef\x8a\xcf\x2f\x57\x62\xf7\x26\x7d\xab\xa1\x73\x21\x0e\xa9\x89\x3f\x80\x49\x32\x9b\x79\x16\xba\x39\xc9\x9c\x7c\x58\x8e\x33\x60\xf9\xc0\x69\x3f\x0b\x3e\xde\x7d\x67\x4e\x6b\x13\xfc\xe7\x26\xd9\xf1\x12\x78\x1d\xfe\x87\x46\x15\xff\x83\x41\xbf\xdf\xe2\x7f\x1f\x54\x8b\xff\x8b\x3c\x5e\x2f\x7a\x80\x7d\x23\x7d\x93\x1e\xb7\xea\xac\xa1\x9f\xd7\x36\xc1\xab\xd2\x26\xf8\xdf\x76\xbf\xaf\xd2\x3a\xfc\x8f\xc7\xe3\x2a\xfe\x8d\xe1\xb0\xc5\xff\x3e\x68\xcb\xfd\xff\x0d\xdd\xfb\xc1\xa1\x26\x08\x98\x8c\x8f\x0f\xe9\x06\x0e\xbb\x35\xa8\xec\x92\x28\xbe\xd8\x12\x36\xc7\x2a\x46\x38\x96\x3c\x22\xc7\x35\x0c\xc9\x46\x7e\x1c\x9f\xed\x8e\xb7\x0c\x2c\x1e\xbd\x7b\x7a\xd1\x08\x63\x45\x90\x58\x2b\x69\x79\x7b\x51\x14\xa5\x4a\x37\xce\xff\xee\xf2\xee\x23\xa3\xb5\xf8\x37\x86\x55\xfc\x8f\x87\x83\x16\xff\xfb\xa0\x1d\xf2\xbf\xeb\x1f\x7e\xec\xdf\x19\xec\xf8\xd4\xa4\x7d\x63\xb2\xcb\xf9\x7f\xdb\x7c\xe0\x1a\xfc\xf7\xfb\x2b\xef\xff\x46\xa6\xd9\xc6\xff\x7b\xa1\x1d\xf3\x7f\x6f\xe7\x1e\x60\x99\xf6\xdb\x22\x7f\x57\x9f\xe7\x79\x7a\xda\xae\x29\x7f\x54\xcd\xd6\xd5\xc4\x2e\x8a\x04\x01\xff\xe2\x87\x7a\x76\xcd\xab\x63\x0f\x5a\x56\xf2\x75\x21\x03\xe3\x1c\x3b\x0c\x7a\xe0\x19\x34\x93\xe8\xa6\x98\x03\x7c\x2c\x8d\xd7\x9c\xe5\x3a\x42\x93\x60\x91\xe4\xf0\x10\x15\xea\x22\xdb\xa7\x42\xa8\xf4\x28\xc2\x02\x79\x2c\x98\xc1\xa7\x55\x6a\xd0\xd3\xd1\xb9\x44\xea\x88\x40\x04\xc2\x68\x68\x0c\x51\xa8\x9a\x63\x89\xba\x25\xc6\x7e\x91\x11\x20\x8f\x58\x00\xfc\xd9\xad\x7b\xfe\x9c\xa2\xd0\x26\xcd\x25\x2a\x9f\x3d\xb3\xb9\x1a\x7b\xaa\x79\xaa\xb8\xd5\xd3\x8b\x77\xf2\xb5\x19\xa5\x95\xc4\x51\x29\x3f\xb4\xf2\xac\x23\x35\x2e\xf5\x69\x55\x14\x4c\x69\x18\xa9\xcb\x7c\xbf\x52\xec\x13\x9f\xf1\x85\x05\x43\xfa\x48\xcb\x37\xe3\xe4\xf7\x48\xf9\xd5\xa7\xc9\x79\x24\x1f\xb4\x7b\x3a\xa3\x32\x0d\x8a\xb6\x4b\xf7\x0c\xca\xcd\xab\x39\x0b\xb3\xbd\xe1\xff\x4e\x68\xdb\xf7\xdf\x2f\x10\xff\xf7\x06\xe3\x64\xff\x1f\xf4\x7b\x23\xf8\x8b\xe3\xff\xb1\xd9\xee\xff\xfb\xa0\xdd\xdf\x7f\x3f\xf6\xf0\xfb\xf9\xde\x64\x96\x5f\xd9\xc5\x7b\x18\x73\xc8\xf6\x6f\x36\x3d\x2a\x96\x2f\xf2\xe6\x2a\x2e\xd8\x5e\xbd\x65\xcf\xcf\xf1\x20\x34\xbd\x55\x5b\xfb\x7c\x70\x0b\xcd\xc9\x37\x49\x02\x65\x4b\xd1\xd8\x6b\x6a\xa2\x67\xed\xb6\xa1\xb3\xd8\x7c\xb0\x79\xd5\x19\x64\xe5\x5d\x64\x6c\xcb\x67\x1b\x5c\x17\x40\x2d\xa3\xda\x31\xbe\xad\xe7\x97\xaf\x4e\xcd\xfe\xff\xea\x6c\x72\xfa\xf1\x4c\xf7\x9d\x27\xf7\xb1\x36\xff\x63\x56\xf2\x3f\xbd\xf1\x78\xdc\xe6\x7f\xf7\x42\x47\xe5\x9b\xcc\x4e\x27\x7e\x19\x3e\xa7\x9e\x87\x5c\xe2\x85\xf1\x73\x70\x1a\xc0\x1c\x41\x41\xfe\xce\x3b\x03\x1a\x2a\xbe\xf3\xee\x74\x8e\x8e\xd0\x15\xb9\x23\x9c\x04\x70\xa2\x9b\x04\x62\x0e\x1b\x4b\xa7\xa3\xa1\xdb\xfc\x2c\x77\x6b\x21\x88\x63\x1f\xa8\x43\x12\x61\xf9\xf9\x8f\x06\x68\xee\x52\xdb\x8d\xfb\x9b\xe3\x40\xaa\x87\xe9\xc9\x3d\x03\x70\x82\x46\xab\x3d\xfe\xa0\x8e\x9b\x49\x9d\x00\xd7\x2c\xd5\xe9\x4a\x49\x76\xd0\x74\x91\x1d\x71\x92\x47\x6c\x8a\xe1\x36\x15\x70\xab\xc7\x7a\x5e\x63\x08\x6e\xe0\x90\x92\x28\x89\xee\x28\xec\x67\x9d\xdb\xdb\x5b\x15\xdd\x74\x6a\x8e\x9e\x50\xf5\xf7\x74\x19\xcd\xf8\x3f\x71\x31\xdf\xf1\xc1\x77\x85\xd6\xe1\x7f\xd0\x1f\xa5\xf1\x9f\x69\x0e\x86\xa6\xfa\xfd\xe7\xb0\x3f\x6e\xf1\xbf\x0f\xaa\xe4\x7f\x20\xc0\xb1\x39\x0d\x65\xfc\xfd\x22\xc6\xfa\x14\x0b\xf5\xcb\x90\x14\x7f\x2c\x24\x1c\x4b\xc6\x3b\x44\xad\x16\x40\xc8\x8c\xc9\xd0\xeb\xf8\x70\xc6\xce\xef\x1b\xb2\x7b\x86\xeb\x88\xe3\xaf\xe8\x94\x08\xd7\x8f\xee\xd5\xc6\x4e\x80\xcd\xb3\x90\x50\xe5\xff\x81\x80\xf2\x81\x79\xf7\xea\x3a\xb6\x26\xa5\xd2\xc9\x37\x77\x2d\x49\x72\x58\xdd\xee\x8c\x4a\x37\x9a\xea\x36\xf3\xbb\x69\xe3\xae\xc7\xee\x99\x2d\xbd\xce\x43\x36\x06\x43\xef\xe9\xed\xa9\x72\x73\x6a\xc6\x7f\xec\x3a\x85\x26\x62\x4f\xf9\x24\x3f\xb0\x0e\xff\x3d\xa3\x9a\xff\xed\xf7\x86\x2d\xfe\xf7\x42\x47\xcb\xc7\x1e\xcb\x4d\x38\xde\x55\x4b\xab\x41\xfd\x48\x2c\xd9\x8e\x89\x53\xb7\x3f\xbe\xf6\x30\x5a\x6a\xa9\xa5\x96\x5a\x6a\xa9\xa5\x96\x5a\x6a\xa9\xa5\x96\x5a\x5a\x43\xff\x03\xe9\x97\x99\xf1\x00\x50\x00\x00\x01\x00\x00\xff\xff\x13\x79\xce\x8f\xc0\x08\x00\x00")

func manifestsNginxIngressTarGzBytes() ([]byte, error) {
	return bindataRead(
		_manifestsNginxIngressTarGz,
		"manifests/nginx-ingress.tar.gz",
	)
}

func manifestsNginxIngressTarGz() (*asset, error) {
	bytes, err := manifestsNginxIngressTarGzBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/nginx-ingress.tar.gz", size: 2240, mode: os.FileMode(436), modTime: time.Unix(1542795033, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"manifests/cert-manager.tar.gz": manifestsCertManagerTarGz,
	"manifests/default-network-policies.tar.gz": manifestsDefaultNetworkPoliciesTarGz,
	"manifests/nginx-ingress.tar.gz": manifestsNginxIngressTarGz,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"manifests": &bintree{nil, map[string]*bintree{
		"cert-manager.tar.gz": &bintree{manifestsCertManagerTarGz, map[string]*bintree{}},
		"default-network-policies.tar.gz": &bintree{manifestsDefaultNetworkPoliciesTarGz, map[string]*bintree{}},
		"nginx-ingress.tar.gz": &bintree{manifestsNginxIngressTarGz, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

