// Code generated by go-bindata.
// sources:
// manifests/default-network-policies.tar.gz
// manifests/nginx-ingress.tar.gz
// DO NOT EDIT!

package components

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _manifestsDefaultNetworkPoliciesTarGz = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x00\x47\x02\xb8\xfd\x1f\x8b\x08\x00\xa1\xe6\xeb\x5b\x00\x03\xed\x96\xdb\x8e\x9b\x30\x10\x40\x79\xe6\x2b\xfc\x03\xdc\x03\xb4\x3c\x55\xbd\x3c\xb5\x5a\x55\xdd\xaa\xef\x5e\x33\x09\x2e\x06\x23\xdb\x64\x1b\xad\xf2\xef\xb5\x49\x48\x57\x6a\xa3\xa4\xd9\x2a\xed\xaa\x73\x10\x32\x9e\x19\xd9\xc0\xdc\x1c\x46\x1d\xed\xf9\x12\xb4\xd1\x51\x0d\x4b\x3a\x0a\x13\xf4\x60\xee\xa5\x6a\x83\x41\x0a\xce\x38\xe8\xc8\x7b\x1a\xb1\xa5\x2c\x73\x37\x26\x65\x1e\x3f\x1e\x67\xbc\x24\xcb\xca\xb4\x2c\xd2\x22\xb1\x72\xab\x4d\x12\x8f\xe4\x4f\xdc\xf7\x2c\x46\x6d\xa8\x22\xc4\x6b\xc6\xae\x03\x75\xdc\xee\x94\xfe\x99\x12\x9e\xe3\xff\x37\x0d\x55\x26\xdc\xd0\x4e\x5c\xb4\x87\x73\x70\x51\x2c\x8e\xfa\x3f\x2b\xca\xbd\xff\xd3\x34\xce\x52\x2f\x4e\x93\x45\x56\x78\x24\xfe\xc3\xdf\xfa\x4b\xfe\x73\xff\xd3\x81\x7f\x01\xa5\xb9\xec\x2b\xb2\x4e\xfc\x1a\x34\x53\x7c\x30\xd3\xfc\xfd\x78\x07\xca\x06\x03\x68\x72\xb3\x0b\x09\x32\x87\x04\x59\x4a\x45\x3e\xc8\x56\x76\xd2\xf0\x35\x10\x26\xec\x7f\x04\xe5\x43\xbf\xe2\x3d\x54\x64\x25\xcd\x20\xfc\x8e\xf2\xde\xd8\xdb\x6e\x50\xf9\x01\xe9\x69\x67\x55\xb7\xa3\xa2\x5f\xc9\x5b\xd0\x4d\x37\xb6\x8d\x4f\x08\x58\x33\x51\x11\xed\xe4\xaf\x5a\xde\xaf\xa5\x68\x43\x2e\xfd\x9d\xf9\xb1\xa0\xf4\xb5\x1c\x15\x83\x69\xe1\xc6\x98\x41\x57\x51\xb4\xe2\xa6\x19\xef\x42\x26\xbb\x68\xbf\x4e\x24\xec\x3b\x32\x23\xfc\xf5\xfc\x91\x71\x98\x84\xb1\xff\xb7\x7f\xfb\x3f\xc3\x59\xf9\xbf\xa6\x62\x04\x7d\x71\x01\x38\x95\xff\x3f\xd5\xff\x34\x29\x8a\x14\xf3\xff\x1a\x9c\xe5\x7f\x03\xdd\x20\xa8\xb9\xf4\x24\x70\x7e\xff\x3f\xd4\xff\x3c\xc6\xfe\x7f\x15\x7e\xd3\xff\x35\xf4\x9b\xa0\x03\x43\x6b\x6a\x68\x40\x99\x2d\xc0\xa7\xeb\xc2\xa9\xfc\x5f\x64\xf9\x9c\xff\x59\x9a\xb9\xfc\x2f\x32\xab\xc6\xfc\xbf\x02\x8f\xfb\xff\xde\xef\xbc\x5f\x85\xed\x0b\x6d\x5b\x70\x64\x4f\x04\x76\x5a\x57\x73\xff\xff\xe8\x22\x62\xe3\xcf\x01\x50\xd9\xee\x3d\x77\x69\x1b\x17\xb0\x52\x36\x1c\x02\x23\x03\x7a\xaf\x0f\x51\xb2\xb7\xd1\x03\x65\xd6\xf0\xe1\x21\xfc\x04\x02\xa8\x86\xf0\x66\x96\x6e\xb7\xbe\x1e\x80\xb9\xd5\x06\x59\xdf\x5a\x35\x33\x52\x59\xdb\xed\x24\x71\x5b\x7e\xde\x0c\xae\xd5\x13\x12\x90\x77\xd3\x2e\xee\xdc\x30\x3d\xec\x84\x46\xba\xd1\x3d\xf1\xe1\xb5\x90\xac\xdd\x4d\x1d\x8c\xd7\xca\xb5\xfd\xe9\x8a\xe2\x83\x1c\xbe\x31\x18\xcc\x0f\xbb\x80\x24\xc5\xcb\x30\xcd\x17\xa1\x1b\xe3\x28\x5d\xe0\x29\x01\x41\x10\x04\x41\x10\x04\x41\x10\x04\x41\x10\x04\x41\x10\x04\x41\x10\x04\x79\x6e\x7c\x07\xf2\xbe\xd5\x6b\x00\x28\x00\x00\x01\x00\x00\xff\xff\x1b\x7e\x36\x82\x47\x02\x00\x00")

func manifestsDefaultNetworkPoliciesTarGzBytes() ([]byte, error) {
	return bindataRead(
		_manifestsDefaultNetworkPoliciesTarGz,
		"manifests/default-network-policies.tar.gz",
	)
}

func manifestsDefaultNetworkPoliciesTarGz() (*asset, error) {
	bytes, err := manifestsDefaultNetworkPoliciesTarGzBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/default-network-policies.tar.gz", size: 583, mode: os.FileMode(436), modTime: time.Unix(1542186657, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _manifestsNginxIngressTarGz = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x00\xa1\x07\x5e\xf8\x1f\x8b\x08\x00\xa1\xe6\xeb\x5b\x00\x03\xed\x5a\x5b\x6f\xdb\x36\x14\xce\xb3\x7f\x05\x91\x0e\xc8\xf6\x20\x59\x92\x6f\x9d\xb1\x15\xcb\x92\xac\x0b\xd0\x66\x46\x93\xf6\xb5\xa0\x25\xc6\x62\x43\x89\x2a\x49\x25\xf5\x7e\xfd\x0e\x75\xb1\x25\xd9\x8a\x2f\x49\xdd\x15\xe5\x07\x04\x8e\x44\xf2\x1c\xde\xce\x77\x78\x8e\x68\x77\x23\x1c\xd3\x5b\x22\x95\xec\xc6\x33\x1a\x7f\xb1\x68\x3c\x13\x44\xca\xee\xd1\xb3\xc1\x01\x8c\x46\x03\xfd\xeb\x8e\x06\x4e\xf5\xb7\xc4\x91\xdb\xeb\x8d\xbc\x91\xe7\x39\x3d\xef\xc8\x71\x07\xbd\xc1\xf0\x08\x0d\x9e\xaf\x0b\xed\x48\xa5\xc2\x02\xa1\xa3\x30\x8d\x22\x22\xda\xeb\x6d\x2a\xff\x4e\x61\xb7\xae\xff\x59\x88\x85\xb2\xe7\x38\x62\x4f\xd5\xa1\x17\x78\x38\xec\xb7\xae\x7f\xcf\x1b\x36\xd6\x7f\xd4\x73\xfa\x47\xc8\x79\x8e\x01\x6e\xc2\x0f\xbe\xfe\x38\xa1\x1f\x88\x90\x94\xc7\x63\x74\xef\x76\x02\x22\x7d\x41\x13\x95\x3d\x5f\xe9\xfd\x80\xa6\x58\x92\x00\x15\xbb\x02\xf1\x84\x08\xac\xb8\xe8\x10\xbd\x5b\xc8\x18\xcd\xb8\x4a\x58\x27\xc2\x34\x56\xf0\x07\xa2\xc6\x1d\x0b\xc5\x38\x82\xa2\xeb\x54\xe0\x4f\xe8\x9c\xc8\x30\x4a\xef\xc2\x0e\x42\x04\xaa\xb1\x31\x92\xfa\xfd\x1f\x77\x34\xbe\xe7\xec\xce\xa6\xbc\x93\x57\xaf\x6d\xbf\x8e\xe4\xa9\xf0\x49\x26\x2d\x54\x2a\x91\xe3\x6e\x77\x46\x55\x98\x4e\x6d\x9f\x47\xdd\xa2\x71\x97\xf1\x3b\xee\x2b\xd6\xb9\x2f\xc7\xe0\xd8\xae\xed\x74\xbe\xf5\xac\x7e\x3f\x68\xb7\x7f\x45\xa2\x84\x61\x45\x9e\xee\x09\xb6\xe7\xff\xc1\x68\xe0\xf5\x32\xfb\x1f\xb9\x86\xff\x0f\x81\x6d\xd6\x5f\x70\x46\x9e\xe2\x08\x36\xf0\xbf\xdb\xef\xf5\xea\xfc\xef\xb9\x9e\xe3\x19\xfe\x3f\x04\xaa\xfc\x2f\xa6\xd8\xb7\x71\xaa\x42\x2e\xe8\xbf\x58\xfb\x00\xfb\xee\xa5\x04\x82\xee\x82\x67\x00\xc6\x0d\xc6\xe8\x1d\x6c\x85\x4e\x44\x14\x0e\xb0\xc2\x63\xa0\xf4\x9c\xba\x4b\xd2\xce\x9f\x65\x82\xfd\xca\x4b\x91\x32\xcd\xe3\x08\x59\x08\xb4\xbd\x16\x3c\x4d\xb2\x47\x0d\x0b\x1d\x1f\x67\xff\x42\xcd\x92\xf0\xcb\x12\x9f\xc7\xb7\x74\x16\xe1\x44\x2e\x5e\x25\x3c\x58\x3e\x48\xe2\x0b\xa2\xf2\x67\xe0\xff\x69\xa5\xe9\x8c\xa8\x27\xeb\x2b\x6b\x5c\xe9\x11\x95\xb5\x5e\x80\x3b\xbb\xc5\x29\x53\x12\x29\x8e\x8e\x7f\x23\x8c\xf8\x7a\xa2\x2c\x1a\xbc\xb2\x7e\x2b\x46\x6c\xf9\x0c\x4b\xf9\xea\x78\xd1\xe6\x6f\x22\x60\x3e\x8e\x97\xe5\x3c\x56\x60\x54\x8c\x08\x8b\x11\x1c\x10\x01\x6d\x33\xe3\xab\xb4\xb9\x09\xa9\x44\x21\xce\xf4\x4c\x09\x82\x09\x4f\x94\xf6\xc3\xb7\x68\xce\x53\xe4\x87\x38\x9e\x11\x44\xc0\x23\x12\x81\x12\x2c\xa0\x93\x8a\x88\x45\xeb\x87\x90\xc4\x88\xe1\x34\xf6\x43\x50\x8a\xa0\x56\xdd\xbd\x56\xba\x60\x2f\xa7\xa6\xb5\x7f\x56\x92\x4e\x19\xf5\x8f\xdb\xe7\x3a\xff\x3f\x4d\x60\x5f\x90\x27\x4f\x7d\x43\x03\x2c\xf3\x5e\x52\x49\x1c\x24\x1c\xce\x25\x8f\x6c\x91\x86\x82\xda\x28\xbe\xb5\x69\x1e\x04\xdb\xf0\xbf\x24\xe2\x9e\xfa\xfb\xbb\x80\x4d\xe7\xff\x61\xdf\x6b\xf2\xff\xc8\xf0\xff\x61\xd0\x38\xff\xe7\x2c\x7f\x9d\x2f\xf8\x1a\xa2\x6f\x23\x91\xf5\xcc\x8f\x10\x8e\x63\xae\x32\x57\x52\x98\x5e\x22\x38\x48\x0d\x49\x9a\xf9\x15\x08\x36\x70\x02\x0d\x4e\x94\x48\xc9\xc9\x9a\x0a\x09\x17\x0a\x8a\x5d\xc7\x1b\xf4\x4f\x3a\x32\x21\xbe\x16\xa3\xe6\xba\xd1\x19\x83\xb5\x23\xe2\x72\x02\x6f\x64\x46\xc4\x5c\xe4\x4a\x36\xf6\x15\xd4\x00\xb5\x42\x1d\xd0\x16\xc0\xb3\x56\x53\x74\xb0\x0c\x5e\x74\xd0\x51\x30\x02\x54\x52\xdc\xe7\x10\xb9\xdc\x9c\x4d\xca\x77\x59\xc7\x5e\x3a\xc5\x23\xec\x21\x20\x94\x49\xf5\x65\x55\x90\xdc\x28\xa9\xdf\xef\xad\x11\xa5\xdf\x7e\xdd\xf5\xdf\xc6\xfe\x83\xdc\xe5\x59\x70\x3c\xb8\x03\x4e\xb5\x76\xe5\x83\x8d\xf1\xff\x70\x58\x3f\xff\x7b\xfd\x51\xcf\x35\xf6\x7f\x08\xec\x68\xff\x8d\xad\xb0\xde\xec\x77\x33\xd3\x55\x91\x5f\xd9\x3a\x5f\x9a\xfc\xc0\x12\xdb\xc6\x7f\xd6\x14\x76\x06\x14\xed\x73\x08\xd8\x64\xff\x7d\xa7\xe9\xff\xbd\xa1\x33\x30\xf6\x7f\x08\xec\x11\xff\xfd\x99\xef\x84\x9d\xc3\x40\x68\xfa\x8e\xdc\xea\xda\xe5\x29\xfe\x11\x95\x50\xab\x12\x71\x36\x15\xc8\x74\xfa\x09\x88\xa4\x88\x2a\x6b\xa4\x75\xea\xfb\x3c\x8d\xd5\x82\x60\x56\x8e\x24\x0d\xde\xf9\xc1\xb9\x60\x1b\xfb\x77\xac\xc5\x44\xee\x15\x03\x6c\xb2\x7f\xd7\x1b\x34\xed\xbf\xe7\x8d\x8c\xfd\x1f\x02\x6b\xfd\xff\x55\xb9\xdc\x8f\xda\x38\xc3\x53\xc2\x64\xd5\x95\x97\x65\xdf\x7a\x50\x06\x5b\x63\xbb\xf3\x7f\xc2\xf8\x3c\x22\xf1\x9e\x9f\x03\x37\xd8\x7f\xdf\x75\xdc\xa6\xfd\xf7\x5d\xf3\xfd\xef\x20\xa8\xda\x3f\x4e\x12\xb9\x74\xf5\xe7\x8b\x55\x7f\x72\x1e\xa0\x0c\x08\x04\x88\xa4\x3e\x96\x63\xe4\xe9\x60\x40\x09\xd8\x5e\xb3\x79\xce\x20\xba\x3d\xd4\x7f\x9f\xe5\xde\xca\x34\x5d\x84\xbf\xbc\x8f\xf1\x3d\xa6\xc0\x35\x0c\x04\xba\x2b\x31\x44\x84\x95\x1f\xbe\xa9\x30\xd1\x56\xd1\x7f\x33\xc2\x28\xf7\x7a\x21\xb3\x32\x5c\x0d\x56\x13\xbf\xa5\x82\xa6\x0a\xe8\x78\x31\x0b\x99\x08\x1e\x90\xeb\xda\x40\xca\xb7\x56\xf6\xb5\xe5\x2e\x9d\x12\x11\x13\xb0\x3e\x7d\xfc\xd2\xef\xc7\x65\xa2\x13\xe9\x6c\xe9\xe2\x5b\x6b\xd9\xd4\xda\xb6\x57\x08\xd1\x08\xcf\xa0\xe6\xe7\x14\xcf\xb5\xf0\xa5\xaa\x35\xcd\xba\x6d\xf2\xc6\x8e\xed\xfe\x6a\x3b\x15\xb1\x10\x63\x55\xfa\x93\xf7\xa9\xb5\x79\xa3\x9e\x65\xb5\xe4\x18\x7e\xff\xe9\xe7\xc9\x3f\xe7\x1f\xaf\x4e\xdf\x5e\x5c\x4f\x4e\xcf\x2e\x7e\x69\x26\x23\x56\x04\xd5\x72\xf0\xbf\xe7\x79\xeb\x4a\xa5\x17\x28\x95\x04\x05\xfc\x21\x7e\xc0\x22\x40\xa7\x93\xcb\x4a\x21\x89\xef\x9b\x23\xc8\x67\xb5\xec\x43\xad\x10\xa1\x7b\xcc\x52\xf2\x97\xe0\xd1\xb8\x51\x80\xd0\x2d\x25\x2c\x28\x8e\xbb\x6b\xcb\x26\x58\x85\xe3\xc5\x56\xb3\xb5\x9e\x47\x55\x67\xc3\xff\xba\xfa\x73\x97\xbf\xac\x57\x89\xbb\x9b\xbd\xaa\xc4\xdf\x25\x16\xbb\x72\x52\x0f\xbe\x4b\x84\x5c\xaa\xb5\x45\xeb\x12\x65\x2d\x42\x97\x59\xb2\x55\xa9\xcd\xb2\x85\x58\x82\x99\x0a\x1f\x97\x9b\xe5\x17\x5b\x25\x37\x4b\x19\xbd\x27\x31\xec\xb1\x89\xe0\x53\x52\x9f\x9f\x5b\xa0\xaa\x54\x90\x9b\x10\xf6\x60\xc8\x19\xd0\x68\xbd\x53\x7a\x8c\xaf\x89\x6a\xae\x4a\x92\x2d\x46\x37\xef\xea\xbf\xcd\xc2\xd6\x2e\x4a\x3f\x24\x7a\x88\x7f\xdf\xdc\x4c\x6a\x45\x34\xa6\x8a\x62\x76\x4e\x18\x9e\x5f\x13\x18\x6c\x20\xb5\x84\x5a\x9d\x84\x08\xca\x83\xb6\x52\x99\xfa\x3e\x0c\xb1\x32\x10\xb7\x56\xae\x68\x44\x78\xaa\x96\xcd\x2b\xa5\x82\x60\x08\x10\xff\xd7\x13\xf4\xf5\x06\x2f\x89\x9f\x0a\xaa\xe6\x67\xb0\xc3\xc8\x97\xc6\x40\x7c\x9c\xe0\x29\x65\xb0\x38\x44\x36\x87\x88\x83\xa0\xf9\xca\x42\x57\x17\x37\x1f\xff\xbc\xbc\x3a\xff\x78\x7d\xf1\xee\xc3\xe5\x0a\x01\x04\x82\x27\xab\x8d\x4e\xdf\xbc\xa9\xbd\x13\x69\x7c\x2a\xdf\x03\xa3\xc2\x64\xf7\xf4\xc7\xc1\x87\x07\x4b\x1b\x7d\x51\x09\x06\x09\x47\x20\xd8\xeb\xc0\x94\xf3\x31\x3a\x65\x0f\x78\x5e\xda\xa1\x22\x22\xa2\x71\x16\x98\xbf\x16\xc0\x0e\x93\xfa\xbc\x0d\x4d\x2a\xed\x3b\xc7\x36\xe7\x7f\x3f\xcf\xe0\x5a\xfb\xde\x03\xd9\x74\xff\xa3\x37\x72\x56\xf2\x7f\x43\x93\xff\x3f\x08\x76\xcc\xff\x15\xc9\xfc\x0d\xd7\x40\x9e\xf1\xc6\x47\xfd\x1b\x7e\xe6\xd5\xe1\x30\xbc\xfb\x8d\x10\x46\xe5\xf2\x7b\xff\x83\x0e\x1a\x76\xef\xde\x52\xf3\x73\x5c\x37\x29\x4e\xb8\x1b\x2f\x27\xec\xd0\x73\xf0\x37\x24\xd6\x6b\x29\x5b\xb5\x16\x4b\xf4\xac\x6a\x5b\x94\x65\xcb\x07\x27\xa5\x75\x0b\xb2\x72\xeb\x22\x5b\xcb\x67\x1b\x5c\x17\x8c\x5a\xa5\x6b\xc7\xf8\x23\x5d\xee\xd8\x02\xfb\x7c\xff\xdd\x35\x1f\xb4\x81\xff\x3d\xa7\xdf\x6b\x7c\xff\x1d\xc0\x61\xde\xf0\xff\x21\xb0\x67\xfe\x67\xa7\xef\xc0\xcb\xb4\xcf\x0e\xf9\x9b\xf5\x71\xfe\xd3\xd3\x36\x6d\xf9\x83\x66\xb6\x66\xcd\xdd\x15\x0d\x70\x31\x3e\x8f\x12\xbb\x3c\xe6\xdb\x98\x41\xcb\x46\xbe\x06\x9c\xd2\x18\x9d\x04\x1c\x34\x88\xd2\x7a\x4e\x56\x72\x40\x8f\xa5\x71\xda\xb3\x1c\x2f\xd0\x69\x3c\xcf\x73\x38\x88\x4a\x1d\xc8\x44\x54\x4a\x9d\x1e\x43\x58\x22\xc6\xe3\x19\xfc\x8e\x6b\x0d\x5c\x1b\x5d\xaa\xcc\xdf\x10\x89\x30\xea\x3b\x7d\xa0\x5a\x68\x8e\x15\xea\xd6\x2a\x7a\xd5\x8a\x9e\xe3\x20\x1e\x43\xfd\x32\xea\x5a\xf8\xe2\xd5\x5c\x92\x3e\x26\xcc\x7c\xa1\xc7\x5e\xf4\xbc\xe8\xf8\xd8\xb5\xab\x31\xd9\xda\x8c\xc2\x4a\xe2\xa0\x96\x1f\x58\xe3\x56\xb2\xc5\xa5\x11\x6d\x8a\x82\x29\x4d\x52\x1d\xcc\x45\x8d\xd7\x11\x89\xb8\x80\xd0\xc6\x73\xde\xd2\x7a\x64\x44\x3e\xa7\x9a\xfa\x9e\x26\xe7\x91\x7c\xc0\xfe\xe1\x6c\x63\x1a\x34\x76\x0b\xf7\x7b\xf5\xe6\xcd\x98\x75\x60\x22\x3c\x83\xdd\xe3\xbf\x7d\xee\x81\x6c\xbc\xff\x35\x6a\xde\xff\xef\x7b\x23\xe3\xff\x0f\x82\xfd\xe3\xbf\xcd\xd7\x40\xf6\xbc\xf1\x51\x8d\x31\xcd\xc5\x0f\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x83\x3d\xf1\x1f\x3b\xc0\x6a\xb8\x00\x50\x00\x00\x01\x00\x00\xff\xff\xf1\xd8\xfd\xac\xa1\x07\x00\x00")

func manifestsNginxIngressTarGzBytes() ([]byte, error) {
	return bindataRead(
		_manifestsNginxIngressTarGz,
		"manifests/nginx-ingress.tar.gz",
	)
}

func manifestsNginxIngressTarGz() (*asset, error) {
	bytes, err := manifestsNginxIngressTarGzBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/nginx-ingress.tar.gz", size: 1953, mode: os.FileMode(436), modTime: time.Unix(1542186657, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"manifests/default-network-policies.tar.gz": manifestsDefaultNetworkPoliciesTarGz,
	"manifests/nginx-ingress.tar.gz": manifestsNginxIngressTarGz,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"manifests": &bintree{nil, map[string]*bintree{
		"default-network-policies.tar.gz": &bintree{manifestsDefaultNetworkPoliciesTarGz, map[string]*bintree{}},
		"nginx-ingress.tar.gz": &bintree{manifestsNginxIngressTarGz, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

