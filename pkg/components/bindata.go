// Code generated by go-bindata.
// sources:
// manifests/default-network-policies.tar.gz
// manifests/nginx-ingress.tar.gz
// DO NOT EDIT!

package components

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _manifestsDefaultNetworkPoliciesTarGz = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x00\x46\x02\xb9\xfd\x1f\x8b\x08\x00\x79\x75\xf2\x5b\x00\x03\xed\x95\xdb\x6e\xd4\x30\x10\x86\x73\x9d\xa7\xf0\x0b\xe4\x7c\x82\x5c\x21\x0e\x57\x20\x84\x54\xd4\x7b\xd7\x99\xdd\x98\x38\x71\x64\x3b\x5b\x56\xd5\xbe\x3b\x76\x76\xd3\x96\x8a\xd5\x2e\x2d\x14\x10\xf3\x45\x91\x63\x7b\x32\xb6\x33\x93\x7f\xc2\xa8\xa7\x03\x5f\x81\x36\x3a\x6a\x60\x45\x27\x61\x82\x01\xcc\xb5\x54\x5d\x30\x4a\xc1\x19\x07\x1d\x79\x4f\x23\xb6\x54\x55\xe1\xda\xa4\x2a\xe2\xfb\xed\x82\x97\x64\x59\x95\xc5\x65\x55\x14\x95\xe7\x66\xd3\xd4\x23\xc5\x13\xd7\x3d\x8b\x49\x1b\xaa\x08\xf1\xda\xa9\xef\x41\x1d\xb7\x3b\x35\xff\x8f\x12\x9e\x13\xff\x37\x2d\x55\x26\xdc\xd2\x5e\x3c\x6a\x0d\x17\xe0\xb2\xcc\x8f\xc6\x3f\x2b\xab\xef\xe3\x9f\x26\x79\x51\x78\x24\xfe\xc5\x67\xfd\x21\xff\x79\xfc\xe9\xc8\x2f\x41\x69\x2e\x87\x9a\x6c\x12\xbf\x01\xcd\x14\x1f\xcd\xdc\x7f\x3f\x5d\x81\xb2\xc9\x00\x9a\x7c\xdc\xa7\x04\x59\x52\x82\xac\xa4\x22\x1f\x64\x27\x7b\x69\xf8\x06\x08\x13\xf6\x3b\x82\xf2\x61\x58\xf3\x01\x6a\xb2\x96\x66\x14\x7e\x4f\xf9\x60\xec\x6d\x17\xa8\xfd\x80\x0c\xb4\xb7\x53\x17\x93\xa2\x5f\xc8\x5b\xd0\x6d\x3f\x75\xad\x4f\x08\x58\x33\x51\x13\xed\xc6\x5f\x75\x7c\xd8\x48\xd1\x85\x5c\xfa\x7b\xf3\x63\x49\xe9\x6b\x39\x29\x06\xb3\xe3\xd6\x98\x51\xd7\x51\xb4\xe6\xa6\x9d\xae\x42\x26\xfb\xe8\xe0\x27\x12\x76\x8f\xcc\x08\x7f\xb3\x1c\x32\x0e\x93\x30\xf6\xff\xf4\x67\xff\x6b\x38\xeb\xff\x37\xd0\x8f\x82\x9a\xc7\x56\x82\x73\xf5\x3f\xcf\xab\x34\x71\x3a\x91\x26\x45\x92\xa1\xfe\x3f\x07\x3f\x19\xff\x06\x86\x6d\xd0\x83\xa1\x0d\x35\x34\xa0\xcc\xfe\x80\xfa\x64\x61\x38\xa5\xff\x45\x91\x3d\x88\x7f\x99\x15\x25\xea\xff\x73\x70\x5f\xff\x0f\x71\xe7\xc3\x3a\xec\x5e\x68\x2b\xc1\x91\xad\x08\xb6\xdb\xd4\x8b\xfe\x7f\x72\x19\xb1\xf5\x97\x04\xa8\xad\x7a\x2f\x2a\x6d\xf3\x02\xd6\xca\xa6\x43\x60\x64\x40\xaf\xf5\x6d\x96\x58\x9b\x9b\x9b\x80\xf0\x15\x09\x2f\xa9\x98\x40\x87\xee\x15\x3d\x52\x06\x64\xb7\x3b\x78\x98\xbb\xb5\x35\x3c\x66\xe4\x5c\x80\xd0\xf0\xf0\x8d\x43\xce\x2e\x16\x43\xe3\xcc\xf5\x08\xcc\xed\x6d\x94\xcd\x05\x08\x60\x46\x2a\xeb\x7b\x37\x8f\xb8\x03\x7c\xde\x8e\xae\x70\x10\x12\x90\x77\xf3\x9e\x5d\x15\x9a\x1f\xf6\x83\x46\xba\xd6\x3d\xf1\xf1\xb5\x90\xac\xdb\x77\x1d\x8c\x37\xca\x15\x91\xf9\x8a\xe2\xdb\x71\xf8\xca\x60\x34\x77\x76\x01\x49\xca\x97\x61\x5a\xe4\xa1\x6b\xe3\x28\xcd\xb1\xe6\x20\x08\x82\x20\x08\x82\x20\x08\x82\x20\x08\x82\x20\x08\x82\x20\x08\x82\x20\x08\xf2\x7b\xf9\x06\x2c\xbf\xaf\x5a\x00\x28\x00\x00\x01\x00\x00\xff\xff\xdf\x44\x3b\x67\x46\x02\x00\x00")

func manifestsDefaultNetworkPoliciesTarGzBytes() ([]byte, error) {
	return bindataRead(
		_manifestsDefaultNetworkPoliciesTarGz,
		"manifests/default-network-policies.tar.gz",
	)
}

func manifestsDefaultNetworkPoliciesTarGz() (*asset, error) {
	bytes, err := manifestsDefaultNetworkPoliciesTarGzBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/default-network-policies.tar.gz", size: 582, mode: os.FileMode(436), modTime: time.Unix(1542616441, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _manifestsNginxIngressTarGz = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x00\xc8\x08\x37\xf7\x1f\x8b\x08\x00\x79\x75\xf2\x5b\x00\x03\xed\x1b\x6b\x6f\xdb\x38\x32\x9f\xfd\x2b\x88\xe4\x80\xdc\x01\x27\xd9\x96\xfc\xe8\x09\xbb\x8b\xf3\x26\xb9\x6e\x80\x36\x67\x34\x69\xbf\x36\xb4\xc4\x58\xdc\x48\xa2\x96\xa4\xec\x7a\x8b\xfd\xef\x37\xd4\xc3\x96\x64\x2b\xf2\x23\x75\x12\x9c\x06\x08\x62\x89\xe4\x3c\x48\xce\x70\x66\x34\xd4\xdb\x3e\x0e\xe8\x03\x11\x52\xb4\x83\x29\x0d\xbe\x69\x34\x98\x72\x22\x44\xfb\xe4\xd9\xa0\x03\x30\x1c\xf6\xd5\xff\xee\xb0\xdf\xc9\xff\xcf\xe0\xa4\x6b\x9a\xc3\x5e\x6f\x68\x74\x07\xbd\x93\x4e\xb7\x6f\x0e\x3b\x27\xa8\xff\x7c\x2c\x54\x43\x24\x24\xe6\x08\x9d\xb8\x91\xef\x13\x5e\xdd\xaf\xae\xfd\x8d\x82\x5e\xb9\xfe\x17\x2e\xe6\x52\x5f\x60\xdf\x3b\x94\x86\x5a\xe0\x81\x5a\xd7\x8a\xf5\x37\x8d\x41\xbc\xfe\x66\x67\x30\xec\xf7\x87\xb0\xfe\x43\xd3\x30\x4f\x50\xe7\x39\x04\xac\x83\xff\xf3\xf5\xc7\x21\xfd\x42\xb8\xa0\x2c\xb0\xd0\xac\xdb\x72\x88\xb0\x39\x0d\x65\xfc\x7c\xa3\xf6\x03\x9a\x60\x41\x1c\x94\xee\x0a\xc4\x42\xc2\xb1\x64\xbc\x45\xd4\x6e\x21\x16\x9a\x32\x19\x7a\x2d\x1f\xd3\x40\xc2\x1f\xa0\xb2\x5a\x1a\x0a\xb0\x0f\x4d\xb7\x11\xc7\xbf\xa3\x4b\x22\x5c\x3f\x7a\x74\x5b\x08\x11\xe8\xe6\x59\x48\xa8\xf7\xff\x7e\xa4\xc1\x8c\x79\x8f\x3a\x65\xad\xa4\x7b\x61\xfb\xb5\x04\x8b\xb8\x4d\x62\x6c\xae\x94\xa1\xb0\xda\xed\x29\x95\x6e\x34\xd1\x6d\xe6\xb7\xd3\xc1\x6d\x8f\x3d\x32\x5b\x7a\xad\x59\x26\x43\x47\xef\xea\x9d\xd6\x4b\xcf\xea\xdb\x81\x6a\xfd\x9f\x61\x2f\x22\x42\x13\xd8\x0f\x3d\x72\x90\x1d\xa8\xd3\xff\x6e\x67\x50\xb4\xff\x46\xb7\x63\x0c\x1b\xfd\x3f\x06\x9c\xa1\x1b\x50\x3e\x11\x62\x9b\x80\x8e\xa3\xb9\x4b\x6d\x17\x49\x97\x8a\xa2\x3a\xa2\x09\x41\x0e\x09\x3d\xb6\x20\x4e\xac\xae\xf1\x08\x2b\x33\x0b\x2f\x2d\x45\x03\xfb\x42\xb5\xfe\x4b\x02\x8a\x8f\x25\x39\xdc\x13\xdc\xdd\xff\x1b\x9a\x83\x41\xe3\xff\x1d\x03\xb6\x59\x7f\xce\x0e\x3b\x00\x6a\xec\x7f\xb7\x3f\xec\x96\xed\xbf\xd1\x6d\xec\xff\x51\x20\xef\xff\xf1\x09\xb6\x75\x1c\x49\x97\x71\xfa\x27\x56\x3e\xa0\xfe\xf8\x4e\x80\x83\xd6\x06\xcf\x10\x3c\x2e\xc7\x42\x9f\x60\x2b\xb4\x7c\x22\xb1\x83\x25\xb6\xc0\xa5\x4b\x5c\xb7\xcc\x69\x43\xe8\xfb\x77\x0d\xd1\x07\xa4\x7f\x89\xbd\x07\x7d\x79\x54\xa0\xbf\xfe\x4a\x7b\xa7\x27\xc7\xf7\xef\x55\x9d\x14\x0a\xe2\x09\x52\x1e\x51\x24\x42\x02\x47\x75\x6f\xf1\xc8\x53\x5e\x22\x42\x1a\x02\x59\xde\x73\x16\x85\xf1\xa3\x02\x0d\x9d\x9e\xc6\x3f\x61\x5c\xe6\x4e\x66\x2d\x36\x0b\x1e\xe8\xd4\xc7\xa1\x58\xbe\x0a\x99\xb3\x7a\x10\xc4\xe6\x44\x26\xcf\xe0\x5d\x4e\x72\x43\xa7\x44\x1e\x4c\x2f\xeb\x11\x9f\xbe\x59\xaf\x33\x70\x96\x1f\x70\xe4\x49\x81\x24\x43\xa7\x3f\x11\x8f\xd8\x6a\x19\x34\xea\xfc\xa2\xfd\x94\xca\xaf\xd9\x1e\x16\xe2\x97\xd3\xe5\x98\xdf\x08\x87\xd9\x39\x5d\xb5\xb3\x40\x82\xca\x7a\x84\x6b\x1e\xc1\x0e\xe1\x30\x36\x56\xed\xdc\x98\x3b\x75\xc2\xbb\x38\xa6\x03\x47\x3b\x2c\x67\x28\x95\x97\xff\x80\x16\x2c\x42\xb6\x8b\x83\x29\x41\x04\xfc\x6d\xc2\x51\x88\x39\x30\x29\x09\x5f\x8e\x9e\xbb\x24\x40\x1e\x8e\x02\xdb\x05\xa2\xe0\x2e\x90\xa2\xb7\x90\x63\x41\x5f\x4d\x4d\x25\x7f\x5a\x18\x4d\x3c\x6a\x9f\x56\xcf\x75\xf2\x3b\x0a\x61\xd7\x91\x83\xa7\xbe\x44\x01\x96\x79\x2f\xac\xb0\x01\x43\x06\x51\xcf\x13\x5b\xa4\x44\xa0\x20\xc5\x4b\x2b\x7e\x0a\xdb\xd8\x7f\x41\xf8\x8c\xda\xfb\x1f\x01\x75\xfe\xff\x70\x38\x2c\xdb\xff\xa1\xd1\x6f\xec\xff\x31\xa0\x14\xff\x27\x56\xfe\x36\x59\xf0\x0d\x86\xbe\x4a\xcd\x5f\xc0\xf2\x23\x84\x83\x80\xc9\xf8\x9c\x4a\x35\x2f\xe4\x0c\x58\x76\x49\x14\x1f\x5a\xc2\xe6\x38\x84\xd1\xe7\x92\x47\xe4\x7c\x43\x87\x90\x71\x09\xcd\x10\x6c\xf6\x7b\xe7\x2d\x11\x12\x5b\xa1\x91\x0b\x35\xe8\xc2\x83\x8d\x41\xf8\xf5\x18\xde\x88\xd8\x0e\x33\x9e\x10\xa9\x9d\x08\x20\x03\x96\x15\xfa\x00\x35\x07\x9e\x15\x99\x94\xc1\x2c\x33\xa2\x32\x1a\xa9\x41\x80\x4e\x92\xd9\xcc\xb3\xd0\xdd\xc5\x38\x7b\x17\x33\xf6\xae\x93\x3e\xc2\x06\x05\x7b\x32\xce\xbf\xcc\x23\x12\xb5\x98\x7a\x3d\x73\x03\x2a\xf5\x76\x2b\xfd\x77\x92\x43\x49\x03\xf7\xe0\x11\x26\x5f\xdb\xd5\x1e\xd4\xe9\x7f\xdf\x30\x4b\xfa\xaf\x7e\x34\xfa\x7f\x0c\xd8\x51\xff\x4b\x5b\xe1\x05\xd4\x7e\x37\x35\x5d\xe7\xf7\x07\x6b\xe7\xbb\x37\x96\x7c\xdc\x36\xfe\xd3\x26\xb0\x33\xa0\x69\x1f\x27\xa0\xf6\xfc\xef\xf4\x4a\xfa\x6f\x0c\x8c\x5e\xa3\xff\xc7\x80\x3d\xe2\xbf\x5f\x93\x9d\xf0\xaa\xc2\x40\xb5\x45\x3f\x91\x07\xc5\x4a\xe6\xc4\x3f\x21\x0f\xf4\xca\x85\xb3\x65\xee\x45\x34\xf9\x1d\x0c\x49\x1a\x54\x16\x2c\xe2\xc8\xb6\x59\x14\x24\xae\xfd\xd3\x22\x6e\x29\x64\x49\xcc\x0a\x41\x4b\x7e\x4f\xc9\xb8\x1d\x64\x70\xb6\xd1\xff\x25\x4f\x7b\x46\x00\x75\xfa\xdf\xeb\xac\xce\x7f\xd3\x34\x95\xfe\x1b\x9d\xe6\xfc\x3f\x0a\x6c\x3c\xff\x97\x9f\x04\x0a\x3a\x7e\x7c\x07\xbf\x9e\xe2\x4e\xc4\x2a\xe8\xbc\xf4\x12\xbc\x28\x6c\xe7\xff\xab\x0f\x3f\x3e\x09\xf6\x2c\x07\xa8\xd1\xff\x9e\x61\x96\xbf\xff\x19\x3d\xb3\xc9\xff\x1e\x05\xf2\xfa\x8f\xc3\x50\xac\x8e\xfa\xcb\xe5\xaa\xbf\xee\x3c\x40\x16\x10\x70\xe0\x97\xda\x58\x58\xc8\x50\xc1\x80\xe4\xb0\x77\xa7\x8b\xc4\xb3\x57\xcc\xc1\xe0\xcf\x71\xea\x2d\xcb\xd2\xf9\xf8\xdb\xe7\x00\xcf\x30\xf5\xf0\xc4\x03\xec\xdd\xb5\x18\xc2\xc7\xd2\x76\x3f\xe0\x09\xf0\x92\x0d\xda\x22\xfa\x2f\x47\x18\x99\x22\xa5\x38\x73\x73\xa9\xc0\x2b\xa0\xdf\x92\x40\x99\x04\x30\x9e\xce\x42\x8c\x82\x39\xe4\xb6\x20\x48\xf6\x56\x8b\x3f\xe5\x3c\x46\x13\xc2\x03\x02\xaa\xad\x7c\x3b\xf5\xde\xca\xf2\x9c\x48\x25\x4b\x97\x85\x1c\xd9\x50\x6d\x5b\xae\x10\xa2\x3e\x9e\x42\xcf\x3f\x22\xbc\x50\xc8\x57\xa4\x36\x0c\x6b\x57\xe1\xb3\x3a\x7a\xf7\x5f\x7a\x27\x87\x16\x62\xac\x1c\x3f\x09\x4f\x95\xc3\x4b\xfd\x34\xad\x22\x81\xf1\xf3\xdf\xfe\x3e\xfe\xef\xe5\xd7\x9b\xd1\xc7\xab\xdb\xf1\xe8\xe2\xea\x1f\xe5\x4c\xc7\x1a\xa2\x42\x0a\xfe\xe7\x24\x6d\x9d\xeb\x74\x86\x22\x41\x90\xc3\xe6\xc1\x1c\x73\x07\x8d\xc6\xd7\xb9\x46\x12\xcc\xca\x12\x24\xb3\x9a\xf1\x50\x68\x44\x28\xae\xbf\xf8\x0f\x67\xbe\x55\x6a\x40\xe8\x81\x12\xcf\x49\xdd\xdd\x8d\x6d\x63\x2c\x5d\x6b\xb9\xd5\x62\xf5\x7a\x92\x74\x2c\xfe\x8f\xa5\x9f\xf8\x13\xab\x7e\xb9\xb8\xbb\xcc\x55\x2e\xfe\xce\x60\xb9\x2b\xc7\xc5\xe0\x3b\x03\x97\x09\xb9\xb1\x69\x53\xa2\xac\x02\xe9\x2a\x4b\xb6\x8e\xb5\xdc\xb6\x44\x4b\xb0\x27\xdd\xa7\xf1\xc6\xf9\xc5\x4a\xcc\xe5\x56\x8f\xce\x48\x00\x7b\x6c\xcc\xd9\x84\x14\xe7\xe7\x01\x4c\x55\xc4\xc9\x9d\x0b\x7b\xd0\x65\x1e\xd8\xe8\x22\x53\x4a\xc6\xf7\x44\x96\x57\x25\x8c\x17\xa3\x9d\xb0\xfa\x67\xb9\xb1\x92\x45\x61\xbb\x44\x89\xf8\xdb\xdd\xdd\xb8\xd0\x44\x03\x2a\x29\xf6\x2e\x89\x87\x17\xb7\x04\x84\x75\x84\xc2\x50\xe8\x13\x12\x4e\x99\x53\xd5\x2a\x22\xdb\x06\x11\x73\x82\x74\x0b\xed\x92\xfa\x84\x45\x72\x35\x3c\xd7\xca\x09\x86\xe8\xf3\x55\x4f\xd0\x8f\x13\x5e\x10\x3b\xe2\x54\x2e\x2e\x60\x87\x91\x6f\x25\x41\x6c\x1c\xe2\x09\xf5\x60\x71\x88\x28\x8b\x88\x1d\xa7\xfc\x4a\x43\x37\x57\x77\x5f\x7f\xbd\xbe\xb9\xfc\x7a\x7b\xf5\xe9\xcb\xf5\x9a\x01\x70\x38\x0b\xd7\x07\x8d\x3e\x7c\x28\xbc\xe3\x51\x30\x12\x9f\xc1\xa2\xc2\x64\x9b\xea\xdb\xe0\x7c\xae\x29\xa5\x4f\x3b\x81\x90\xe0\x5f\xc1\x5e\x07\x4b\xb9\xb0\xd0\xc8\x9b\xe3\x45\xa6\x87\x92\x70\x9f\x06\x71\x60\xfe\x9e\x83\x75\x18\x17\xe7\x6d\xf0\xc6\x52\x69\x6f\x12\xb6\xf1\xff\xed\x24\xc9\xaa\xed\x5b\x07\x52\x57\xff\xa1\x8a\xbd\xe3\xfa\x5f\x03\xba\x19\x46\x9c\xff\x1b\x34\xf9\xbf\xa3\xc0\x8e\xf9\xbf\x34\xdf\x5e\x53\x06\xf2\x8c\x35\x19\xc5\xaf\xec\xf1\xc1\x0b\xfe\xea\xee\x35\x1b\x1e\x15\xab\x2f\xf2\x73\xe5\xd7\xef\xce\xde\x8a\xf2\x73\x14\x84\xa4\x4e\x68\x6d\xf9\xc0\x0e\x9c\xc3\x91\x40\x02\xb5\x96\xa2\x92\x6a\xba\x44\xcf\x4a\xb6\x82\x58\xbc\x7c\xe0\xcc\x6c\x5a\x90\xb5\xba\x88\x78\x2d\x9f\x4d\xb8\x36\x28\xb5\x8c\x36\xca\xf8\xba\xca\x2f\x5e\x1c\xf6\xf9\xfe\xbb\x6b\x3e\xa8\xc6\xfe\x1b\x46\xb9\xfe\x13\x7c\x2d\xb3\xb9\xff\x71\x14\xd8\x33\xff\xf3\x7a\xbe\x03\xaf\xd2\x3e\x3b\xe4\x6f\x36\xc7\xf9\x87\xa7\x6d\xaa\xf2\x07\xe5\x6c\xcd\x86\xda\x15\x05\x70\x7e\xd9\xcc\x0f\xf5\xcc\xcd\xd7\xb1\x07\x23\x4b\xf9\x1a\x38\xf1\x2c\x74\xee\x30\xa0\xc0\x33\xd5\x3c\x5f\xcb\x01\x3d\x95\xc6\xa9\xce\x72\x9c\xa1\x51\xb0\x48\x72\x38\x88\x0a\x15\xc8\xf8\x54\x08\x95\x1e\x43\x58\x20\x8f\x05\x53\xf8\x6f\x15\x06\x74\x75\x74\x2d\xe3\xc3\x8c\x08\x84\x51\xaf\xd3\x03\x3b\x0e\xc3\xb1\x44\xed\x42\x47\x23\xdf\x11\x54\x1e\xb1\x00\xfa\x67\x51\xd7\xf2\xa0\x5f\xcf\x25\x29\x1f\x64\x6a\x73\x25\x7b\xca\x79\xca\xb8\xd5\xd5\xf3\x31\xd9\xc6\x8c\xc2\x5a\xe2\xa0\x90\x1f\xd8\x70\x66\xc5\x8b\x4b\x7d\x5a\x46\x05\x53\x1a\x46\x2a\x98\xf3\x4b\xaf\x7d\xe2\x33\x0e\xa1\x8d\xd1\xf9\x48\x8b\x91\x11\xf9\x23\x52\x76\xf5\x30\x3c\x4f\xe4\x03\xf6\x0f\x67\x4b\xd3\xa0\x60\xb7\x70\xdf\x2c\x0e\x2f\xc7\xac\xfd\x26\xc2\x7b\x23\xb0\x6b\xfc\xb7\x4f\x1d\x48\x6d\xfd\x97\x59\xae\xff\xec\x99\x9d\xe6\xfb\xcf\x51\x60\xff\xf8\xaf\xbe\x0c\x64\xcf\xa2\x8c\x7c\x8c\xf9\xd6\x6b\x33\x5e\x7a\x79\x6b\xa1\x5a\xff\x3f\x5d\x8d\x2e\x3f\x5e\xe9\xbe\x73\x30\x8d\xda\xfa\x8f\x7e\xa9\xfe\xb3\x3b\x18\xf4\x9b\xfa\x8f\xa3\xc0\x59\xe9\xda\x75\x2b\xbe\x19\x32\xa7\x9e\x87\x5c\xe2\x85\xf1\x75\x10\x1a\xc0\x1c\xc1\x8b\xe5\x3d\x8f\xe5\x6d\xf0\xfc\x3d\x8f\x56\xeb\xec\x0c\x81\xba\x13\x4e\x02\x50\xa1\x51\x20\xe6\x60\x58\x5a\x2d\x0d\xdd\x2f\x15\xe7\xde\x42\xe0\xc7\xcc\xa8\x43\x12\x64\xeb\x57\x4f\x15\xbd\x39\x0e\xa4\xba\x98\x92\xc4\x99\xc9\x6d\xd4\x75\x8a\xff\x54\x1a\x9e\xb4\x09\x04\xce\xb4\xf2\xae\x15\x66\x07\x4d\x16\x99\xfa\x25\x1f\xb1\x54\x87\xfb\x14\xc1\xbd\x1e\xf3\x79\x1b\xdf\x6a\x06\x2f\x3c\x66\x12\x3d\x50\xb0\x35\xad\xfb\xfb\x7b\x75\xaa\x6d\xb8\xdf\xaa\x9a\x1a\x57\xa5\x81\x06\x1a\x68\xa0\x81\x06\x1a\x68\xa0\x81\x06\x1a\x78\xdb\xf0\x3f\x9c\xee\x92\xbd\x00\x50\x00\x00\x01\x00\x00\xff\xff\xd5\x6e\x9b\x90\xc8\x08\x00\x00")

func manifestsNginxIngressTarGzBytes() ([]byte, error) {
	return bindataRead(
		_manifestsNginxIngressTarGz,
		"manifests/nginx-ingress.tar.gz",
	)
}

func manifestsNginxIngressTarGz() (*asset, error) {
	bytes, err := manifestsNginxIngressTarGzBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/nginx-ingress.tar.gz", size: 2248, mode: os.FileMode(436), modTime: time.Unix(1542616441, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"manifests/default-network-policies.tar.gz": manifestsDefaultNetworkPoliciesTarGz,
	"manifests/nginx-ingress.tar.gz": manifestsNginxIngressTarGz,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"manifests": &bintree{nil, map[string]*bintree{
		"default-network-policies.tar.gz": &bintree{manifestsDefaultNetworkPoliciesTarGz, map[string]*bintree{}},
		"nginx-ingress.tar.gz": &bintree{manifestsNginxIngressTarGz, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

