// Code generated by go-bindata.
// sources:
// manifests/nginx-ingress/0-namespace.yaml
// manifests/nginx-ingress/deployment.yaml
// manifests/nginx-ingress/service.yaml
// manifests/nginx-ingress/rbac/cluster-role-binding.yaml
// manifests/nginx-ingress/rbac/cluster-role.yaml
// manifests/nginx-ingress/rbac/role-binding.yaml
// manifests/nginx-ingress/rbac/role.yaml
// DO NOT EDIT!

package ingressnginx

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _manifestsNginxIngress0NamespaceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xc9\xb1\x0d\x80\x30\x0c\x04\xc0\xde\x53\x78\x05\x5a\x0f\x41\x49\xff\x90\x17\xb2\x48\x4c\x14\x47\xcc\x8f\x68\xa9\x0f\xdd\x37\x8e\xf4\x3b\x4c\x9f\x45\x2e\x8f\x62\xba\xa2\x31\x3b\x0e\x4a\xe3\x44\xc1\x84\x89\x6a\xa0\xd1\xd4\xe3\x1c\xcc\x14\xd5\x8a\x9d\x35\x3f\xf9\xdb\x1b\x00\x00\xff\xff\xe6\xa7\x4d\x17\x55\x00\x00\x00")

func manifestsNginxIngress0NamespaceYamlBytes() ([]byte, error) {
	return bindataRead(
		_manifestsNginxIngress0NamespaceYaml,
		"manifests/nginx-ingress/0-namespace.yaml",
	)
}

func manifestsNginxIngress0NamespaceYaml() (*asset, error) {
	bytes, err := manifestsNginxIngress0NamespaceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/nginx-ingress/0-namespace.yaml", size: 85, mode: os.FileMode(420), modTime: time.Unix(1538989435, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _manifestsNginxIngressDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x54\x4d\x4f\x1b\x3d\x10\xbe\xe7\x57\x8c\xe0\x3d\xbc\x3d\x6c\x3e\x80\x56\xad\x25\x0e\x29\x49\x29\x12\xa5\x2b\x12\xb8\xa2\x89\x3d\xc9\x5a\x78\x6d\xd7\x9e\x4d\x48\x7f\x7d\xb5\xf9\x62\x77\x43\x28\x17\xa4\xee\x71\x9e\x99\xe7\x63\x6c\x2f\x7a\x7d\x4f\x21\x6a\x67\x05\xa0\xf7\xb1\x33\xef\xb5\x1e\xb5\x55\x02\x06\xe4\x8d\x5b\xe6\x64\xb9\x95\x13\xa3\x42\x46\xd1\x02\xb0\x98\x93\x00\x3b\xd3\xf6\x29\xd1\x76\x16\x28\xc6\x44\x3a\xcb\xc1\x19\x43\x61\xd3\x10\x3d\x4a\x12\xb0\xc1\x5b\xd1\x93\x2c\x67\x03\x79\xa3\x25\x46\x01\x27\x2d\x80\xc8\x01\x99\x66\xcb\x12\x01\x28\xe7\xb5\x9d\xdd\x79\x85\x4c\xeb\x12\x40\x8e\x4f\x77\x16\xe7\xa8\x0d\x4e\x0c\x09\xe8\x95\x63\x64\x48\xb2\x0b\xeb\x9e\x1c\x59\x66\xd7\x38\x21\x13\xb7\x43\x7f\x75\x58\x7e\x3e\xc3\x48\x02\x7c\x70\xaa\x05\xc0\x94\x7b\xb3\xd3\xad\xc6\x2d\x3f\x53\xa3\x7f\xa3\x40\x53\x02\x60\xbb\x85\x15\x85\x53\x34\xaa\x05\xd9\x56\x93\xe0\x0c\xb5\x1f\x8b\x09\x05\x4b\x4c\xb1\xad\x5d\xa7\xac\x0b\x38\x3a\xda\x34\x96\x5a\xa8\x2d\x85\x8a\xa7\xe4\xad\xae\x00\x74\x8e\x33\x12\xf0\xab\xc0\x65\x49\xfe\x2c\xf5\xc2\x58\xe7\x10\x9f\xe8\xb6\x7b\x5f\xda\xdd\x0a\x2d\x86\x59\xc5\xcf\xda\xd3\xc1\xf1\x46\x5f\x92\x28\x9a\x62\x61\x38\x99\xa0\x7c\x24\xab\x92\x48\x61\xae\x25\x9d\xff\xf7\x7f\xfa\x73\xf0\x70\xd3\xff\x31\x1c\xa5\xfd\x8b\xe1\x87\x4e\xa3\x71\x8f\x68\xa7\x65\x30\xc6\x73\x5f\x4c\x8c\x96\x95\xa6\x63\x28\x22\x81\x72\x0b\xbb\xc0\xa0\xa0\x9f\x5e\x55\x40\xb2\xf3\x66\x82\xf5\x56\xb7\x1e\x6a\x20\xc0\x1c\x4d\x41\xdf\x82\xcb\x45\x03\x00\x98\x6a\x32\xea\x96\xa6\xfb\xc8\x06\x4b\x91\x33\xb1\xbb\x6a\xed\x52\xe7\x55\xe9\x55\xfc\xf7\xd5\x5f\xbd\xda\x4a\xbf\x77\x81\xf7\x8e\x74\xed\x2a\x63\xf6\x0d\xe6\xdd\xad\x4c\x5d\x60\x01\x9f\xbb\x0d\x3c\x73\x91\x5f\x84\xaa\x9c\xf1\x75\xd2\xb3\xb3\xd3\x83\xac\x4d\x6c\x47\x4b\x68\x38\x7b\x9d\xb7\xd7\x3d\xf9\x78\x76\x90\xb9\x89\x1a\x3d\x27\x4b\x31\xa6\xc1\x4d\xa8\xbe\x9f\x29\x6a\x53\x04\x1a\x67\x81\x62\xe6\x8c\x12\x50\x37\x55\x66\xbc\x24\x6e\x9e\x8a\x5f\x1d\x46\x67\x6d\xf5\x77\x13\x3c\x68\x31\xca\x8c\xca\x88\xdf\xc7\xe3\xb4\x06\x69\xab\x59\xa3\x19\x90\xc1\xe5\x88\xa4\xb3\x2a\x96\x0c\xb5\x1e\x4f\x41\x3b\x75\x08\x8d\x85\x94\x14\x63\x25\x48\xaf\x86\xb3\xce\xc9\x15\xfc\x3c\x5e\x41\x03\xa1\xd2\xff\xf6\x82\xde\x2f\x7c\x24\x59\x04\xcd\xcb\x0b\x67\x99\x9e\x1a\x41\x24\x7a\x9c\x68\xa3\x59\x53\x6c\x46\x44\xa5\x9a\xa5\x04\x6e\x86\xe3\x87\xaf\x57\x37\x83\x87\xd1\xf0\xf6\xfe\x6a\xef\x07\xa0\x82\xf3\xfb\x43\xfd\xeb\xeb\x5a\x2d\x14\xb6\x1f\xef\x22\x05\x01\xa7\xa7\x70\x0c\x8b\xc5\x22\x29\x1f\xfd\xa6\x29\x50\x64\x0c\x9c\x3a\xa3\xe5\x52\x40\xdf\x2c\x70\xb9\x7d\x87\x4c\x21\xd7\x16\x59\x3b\x7b\x19\x50\x52\x5a\xdf\xdb\xa7\x6e\xeb\x4f\x00\x00\x00\xff\xff\x5a\x91\xd0\xac\x41\x08\x00\x00")

func manifestsNginxIngressDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_manifestsNginxIngressDeploymentYaml,
		"manifests/nginx-ingress/deployment.yaml",
	)
}

func manifestsNginxIngressDeploymentYaml() (*asset, error) {
	bytes, err := manifestsNginxIngressDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/nginx-ingress/deployment.yaml", size: 2113, mode: os.FileMode(420), modTime: time.Unix(1538751884, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _manifestsNginxIngressServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8e\x31\x4f\xc4\x30\x0c\x85\xf7\xfc\x0a\x6f\x9d\x0e\xee\xa0\x48\x28\xeb\x4d\x6c\x95\x40\xec\x56\x6a\xb5\x11\xad\x1d\xd9\xee\x09\xfe\x3d\x4a\x09\xd2\x0d\x27\xdd\x98\x17\xbf\xef\x7d\x58\xf2\x27\xa9\x65\xe1\x08\x97\x53\xf8\xca\x3c\x46\x78\x27\xbd\xe4\x44\x61\x25\xc7\x11\x1d\x63\x00\x60\x5c\x29\x02\x4f\x99\xbf\x0f\x99\x27\x25\xb3\x43\x12\x76\x95\x65\x21\x6d\x07\x56\x30\x51\x84\xf6\x1f\x00\x90\x59\x1c\x3d\x0b\x5b\x85\x00\x14\x95\x95\x7c\xa6\xcd\x1e\xb2\x3c\x5a\x52\x2c\x14\xa1\x73\xdd\xa8\xbb\x71\x50\x44\x3d\x42\x77\x3a\x3e\xbd\xf4\x5d\xb0\x42\xa9\x62\xfc\xa7\x96\xce\xcb\x66\x4e\xfa\x36\x04\x00\xa3\x85\x92\x8b\xfe\x8d\xdc\x75\x05\x28\x33\x1a\xc5\xba\x36\x06\x80\x3a\xd3\x04\x0f\xad\x3d\xbb\x97\x3d\xd8\x95\x5c\x92\x2c\x11\x3e\xce\xc3\x7f\xb6\x8b\xbd\x1e\xdb\xd3\x51\x27\xf2\xe1\x3a\xbc\x06\xd9\x5d\x52\xdf\x3f\xdf\x40\xd5\xf4\x37\x00\x00\xff\xff\xd1\xda\x36\x3b\xa2\x01\x00\x00")

func manifestsNginxIngressServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_manifestsNginxIngressServiceYaml,
		"manifests/nginx-ingress/service.yaml",
	)
}

func manifestsNginxIngressServiceYaml() (*asset, error) {
	bytes, err := manifestsNginxIngressServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/nginx-ingress/service.yaml", size: 418, mode: os.FileMode(420), modTime: time.Unix(1538751884, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _manifestsNginxIngressRbacClusterRoleBindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8d\xb1\x4e\xc5\x30\x0c\x45\xf7\x7c\x85\x7f\x80\x22\x36\x94\x0d\x18\xd8\x1f\x12\xbb\x5f\xe2\x16\xd3\xd4\x8e\x6c\xa7\x03\x5f\x8f\x2a\x40\x42\xaa\xf4\x56\xfb\x9e\x73\xb0\xf3\x3b\x99\xb3\x4a\x06\xbb\x62\x99\x70\xc4\x87\x1a\x7f\x61\xb0\xca\xb4\x3e\xfa\xc4\x7a\xbf\x3f\xa4\x95\xa5\x66\x78\x69\xc3\x83\xec\xa2\x8d\x9e\x59\x2a\xcb\x92\x36\x0a\xac\x18\x98\x13\x80\xe0\x46\x19\x58\x16\x23\xf7\x64\xda\xe8\x42\xf3\xf1\xc0\xce\xaf\xa6\xa3\xdf\x88\x24\x80\x53\xe3\xa4\xf4\x71\xfd\xa4\x12\x7e\x38\xef\x7e\xf7\x6f\x64\x3b\x17\x7a\x2a\x45\x87\x44\x02\xf8\x81\xbc\x63\xf9\x47\xfe\x9d\x33\x54\x9a\x71\xb4\x48\xdf\x01\x00\x00\xff\xff\x85\xa2\xc6\x39\xfb\x00\x00\x00")

func manifestsNginxIngressRbacClusterRoleBindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_manifestsNginxIngressRbacClusterRoleBindingYaml,
		"manifests/nginx-ingress/rbac/cluster-role-binding.yaml",
	)
}

func manifestsNginxIngressRbacClusterRoleBindingYaml() (*asset, error) {
	bytes, err := manifestsNginxIngressRbacClusterRoleBindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/nginx-ingress/rbac/cluster-role-binding.yaml", size: 251, mode: os.FileMode(420), modTime: time.Unix(1538751884, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _manifestsNginxIngressRbacClusterRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x91\xc1\x6a\xf3\x30\x10\x84\xef\x7e\x0a\x91\x7b\x12\xfe\xdb\x8f\xaf\x3d\xf4\xde\x43\xef\x1b\x69\xea\x2c\xb1\xb5\x62\x77\xe5\x96\x3e\x7d\xb1\x09\xb1\x29\x49\xc1\x10\x9d\x34\x23\x31\xb3\xcb\x47\x85\xdf\xa1\xc6\x92\xdb\xa0\x27\x8a\x07\xaa\x7e\x16\xe5\x6f\x72\x96\x7c\xb8\xfc\xb7\x03\xcb\x71\xfc\xd7\x5c\x38\xa7\x36\xbc\xf4\xd5\x1c\xfa\x26\x3d\x9a\x01\x4e\x89\x9c\xda\x26\x84\x4c\x03\xda\xc0\xb9\x53\x98\x35\x5a\x7b\xd8\x64\xef\x03\x15\x7e\x55\xa9\x65\x96\xd3\xd9\x87\xdd\x6e\xbe\x2a\x4c\xaa\x46\xac\x5e\xa2\xe4\x0f\xee\x06\x2a\x76\xb3\x90\x53\x11\xce\xbe\x38\x59\x12\x16\x55\x24\x2d\xc2\x10\x15\xd7\xaf\x23\xf4\xb4\x8a\xee\xd9\xfc\x26\x3e\xc9\xe3\x79\xfb\x78\x4b\xf3\xaf\xf0\x0e\xbe\x3d\xcd\xa0\x23\xc7\xbf\x02\x37\x4f\x8e\x2f\x47\x9e\x58\xda\xc3\xd6\x2b\xa2\xa7\xd6\x3e\x28\x9b\xf1\x8d\xc8\xf7\x80\xcc\xb4\x15\xe4\x58\x19\xe5\x69\xcb\x1d\xcd\xc9\xeb\xdd\x1d\x6b\x49\x53\xeb\x4f\x00\x00\x00\xff\xff\x00\x8e\x9c\x6c\xf8\x02\x00\x00")

func manifestsNginxIngressRbacClusterRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_manifestsNginxIngressRbacClusterRoleYaml,
		"manifests/nginx-ingress/rbac/cluster-role.yaml",
	)
}

func manifestsNginxIngressRbacClusterRoleYaml() (*asset, error) {
	bytes, err := manifestsNginxIngressRbacClusterRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/nginx-ingress/rbac/cluster-role.yaml", size: 760, mode: os.FileMode(420), modTime: time.Unix(1538751884, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _manifestsNginxIngressRbacRoleBindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\x31\xce\xc2\x30\x0c\x46\xf7\x9c\xc2\x17\xf8\xfb\x8b\x0d\x65\x83\x85\xbd\x48\xec\x6e\xe2\x16\xd3\xd6\x8e\x12\xa7\x03\xa7\x47\x95\x8a\x40\x02\x31\xfa\xe9\xc9\xef\xc3\xc4\x17\xca\x85\x55\x3c\xe4\x0e\x43\x83\xd5\xae\x9a\xf9\x8e\xc6\x2a\xcd\xb8\x2f\x0d\xeb\xff\xb2\x73\x23\x4b\xf4\xd0\xea\x44\x47\x96\xc8\x32\xb8\x99\x0c\x23\x1a\x7a\x07\x20\x38\x93\x07\x96\x21\x53\x29\xdb\x5d\x12\x86\x37\x98\x75\xa2\x96\xfa\xd5\xc6\xc4\xa7\xac\x35\xfd\x48\x3a\x80\x57\xf1\x23\x50\x6a\x77\xa3\x60\x65\x7d\xf6\xb7\x89\x67\xca\x0b\x07\x3a\x84\xa0\x55\xcc\x01\x7c\x5d\xf1\xc4\x1e\x22\xf5\x58\x27\x73\x8f\x00\x00\x00\xff\xff\xcf\x56\x87\x67\x02\x01\x00\x00")

func manifestsNginxIngressRbacRoleBindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_manifestsNginxIngressRbacRoleBindingYaml,
		"manifests/nginx-ingress/rbac/role-binding.yaml",
	)
}

func manifestsNginxIngressRbacRoleBindingYaml() (*asset, error) {
	bytes, err := manifestsNginxIngressRbacRoleBindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/nginx-ingress/rbac/role-binding.yaml", size: 258, mode: os.FileMode(420), modTime: time.Unix(1538751884, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _manifestsNginxIngressRbacRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x52\xbd\xce\xd4\x30\x10\xec\xef\x29\x56\xa1\x76\x10\x1d\x8a\x4e\x57\x21\x41\x45\x81\x10\xfd\xc6\x9e\x8b\x57\x9f\x63\x5b\x6b\xfb\xe3\xe7\xe9\x51\x72\x7f\xe1\xd0\x51\x70\xa9\x76\x76\x77\x32\x3b\x23\x73\x96\x6f\xd0\x22\x29\x0e\xa4\x23\xdb\x9e\x5b\xf5\x49\xe5\x17\x57\x49\xb1\x7f\x79\x5f\x7a\x49\x6f\x5f\xdf\xed\x5e\x24\xba\x81\xbe\xa4\x80\xdd\x8c\xca\x8e\x2b\x0f\x3b\xa2\xc8\x33\x06\x92\x38\x29\x4a\x39\xe3\x92\xd9\x6e\x9a\xda\x02\xca\xb2\x6b\x88\xb3\x7c\xd4\xd4\xf2\x0a\x97\xcf\x50\xd7\xad\xa5\xa2\xa4\xa6\x16\x9b\x89\x4d\xf1\x28\xd3\xcc\xb9\x5c\x5b\x39\xb9\x1b\x28\xb0\x8a\x7a\xc2\xaf\xd0\x71\x43\x9d\x50\x9f\xd6\xbb\x6c\x7c\x5e\x1c\x5d\xb6\xde\xd0\x07\x1c\xb9\x85\x5a\xa8\x26\xea\xf6\x08\xb0\x4b\x50\x46\xdc\xc1\xec\xcf\x8e\x8d\x0d\x5c\xca\xa1\xbb\x72\x3e\x41\x31\x50\x77\x9b\xa7\x58\x35\x85\x00\x35\x01\xec\xa0\x07\xb3\x8f\x93\xc4\x1f\x1b\xce\x57\x2f\x85\x3c\xaf\x3a\x23\x88\x1d\xe7\x0a\x47\x72\xa4\x9f\xa9\x91\xf5\x1c\x27\x10\xa4\x7a\x28\x65\x56\x9e\x51\xa1\x57\xf6\x77\x8f\x48\x81\x5b\xb4\x5e\xe2\x44\xd5\x83\x56\x01\xf3\xf7\x09\xfd\x2d\x9a\x87\xf7\x99\xdc\xc6\x20\xb6\x7b\x9c\xf5\xa9\x6e\xd9\x71\xc5\xd3\xd1\xdf\x29\x58\xc5\x7f\xfd\x15\xd1\xe5\x24\xf1\x5f\x4f\xe4\x4e\xe0\x0f\x17\xbf\x03\x00\x00\xff\xff\x0e\x8a\x1a\x07\x1b\x03\x00\x00")

func manifestsNginxIngressRbacRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_manifestsNginxIngressRbacRoleYaml,
		"manifests/nginx-ingress/rbac/role.yaml",
	)
}

func manifestsNginxIngressRbacRoleYaml() (*asset, error) {
	bytes, err := manifestsNginxIngressRbacRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/nginx-ingress/rbac/role.yaml", size: 795, mode: os.FileMode(420), modTime: time.Unix(1538751884, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"manifests/nginx-ingress/0-namespace.yaml":               manifestsNginxIngress0NamespaceYaml,
	"manifests/nginx-ingress/deployment.yaml":                manifestsNginxIngressDeploymentYaml,
	"manifests/nginx-ingress/service.yaml":                   manifestsNginxIngressServiceYaml,
	"manifests/nginx-ingress/rbac/cluster-role-binding.yaml": manifestsNginxIngressRbacClusterRoleBindingYaml,
	"manifests/nginx-ingress/rbac/cluster-role.yaml":         manifestsNginxIngressRbacClusterRoleYaml,
	"manifests/nginx-ingress/rbac/role-binding.yaml":         manifestsNginxIngressRbacRoleBindingYaml,
	"manifests/nginx-ingress/rbac/role.yaml":                 manifestsNginxIngressRbacRoleYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"manifests": {nil, map[string]*bintree{
		"nginx-ingress": {nil, map[string]*bintree{
			"0-namespace.yaml": {manifestsNginxIngress0NamespaceYaml, map[string]*bintree{}},
			"deployment.yaml":  {manifestsNginxIngressDeploymentYaml, map[string]*bintree{}},
			"rbac": {nil, map[string]*bintree{
				"cluster-role-binding.yaml": {manifestsNginxIngressRbacClusterRoleBindingYaml, map[string]*bintree{}},
				"cluster-role.yaml":         {manifestsNginxIngressRbacClusterRoleYaml, map[string]*bintree{}},
				"role-binding.yaml":         {manifestsNginxIngressRbacRoleBindingYaml, map[string]*bintree{}},
				"role.yaml":                 {manifestsNginxIngressRbacRoleYaml, map[string]*bintree{}},
			}},
			"service.yaml": {manifestsNginxIngressServiceYaml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
